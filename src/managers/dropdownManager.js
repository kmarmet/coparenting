// Generated by CoffeeScript 2.7.0
var DropdownManager;

import Manager from "./manager";

import StringManager from "./stringManager";

import CalMapper from "../mappers/calMapper";

import CalendarMapper from "../mappers/calMapper";

import DatasetManager from "./datasetManager";

import ExpenseCategories from "../constants/expenseCategories";

import ExpenseSortByTypes from "../constants/expenseSortByTypes";

import DB_UserScoped from "../database/db_userScoped";

DropdownManager = {
  // HELPERS
  GetReadableReminderTimes: function(reminderTimes) {
    var i, len, readableTimes, time;
    readableTimes = [];
    if (Manager.IsValid(reminderTimes)) {
      for (i = 0, len = reminderTimes.length; i < len; i++) {
        time = reminderTimes[i];
        if (Manager.IsValid(time, true)) {
          readableTimes.push(CalMapper.GetShortenedReadableReminderTime(time));
        }
      }
    }
    return readableTimes;
  },
  // MAPPERS
  MappedForDatabase: {
    RemindersFromArray: function(times) {
      var formatted, i, len, time;
      formatted = [];
      if (Manager.IsValid(times)) {
        for (i = 0, len = times.length; i < len; i++) {
          time = times[i];
          formatted.push(CalendarMapper.GetReminderTimes(time != null ? time.value : void 0));
        }
      }
      return DatasetManager.GetValidArray(formatted);
    },
    ShareWithFromArray: function(users) {
      var formatted, i, len, user;
      formatted = [];
      if (Manager.IsValid(users)) {
        for (i = 0, len = users.length; i < len; i++) {
          user = users[i];
          formatted.push(user != null ? user.value : void 0);
        }
      }
      return DatasetManager.GetValidArray(formatted);
    },
    ChildrenFromArray: function(children) {
      var child, formatted, i, len;
      formatted = [];
      if (Manager.IsValid(children)) {
        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          formatted.push(child != null ? child.label : void 0);
        }
      }
      return DatasetManager.GetValidArray(formatted);
    }
  },
  // GET SELECTED
  GetSelected: {
    Reminders: function(reminders) {
      var i, len, options, reminder;
      options = [];
      if (Manager.IsValid(reminders)) {
        for (i = 0, len = reminders.length; i < len; i++) {
          reminder = reminders[i];
          options.push({
            label: CalMapper.GetShortenedReadableReminderTime(reminder),
            value: reminder
          });
        }
      }
      return options;
    },
    Children: function(childNames) {
      var childName, i, len, options;
      options = [];
      if (Manager.IsValid(childNames)) {
        for (i = 0, len = childNames.length; i < len; i++) {
          childName = childNames[i];
          options.push({
            label: StringManager.FormatTitle(childName),
            value: childName
          });
        }
      }
      return options;
    },
    ExpenseCategory: function(category) {
      if (!Manager.IsValid(category)) {
        return 'Category';
      }
      return [
        {
          label: category,
          value: category
        }
      ];
    },
    View: function(view) {
      if (!Manager.IsValid(view)) {
        return 'Select View';
      }
      return [
        {
          label: view,
          value: view
        }
      ];
    },
    ShareWith: async function(currentUser) {
      var account, i, len, options, ref, validAccounts;
      options = [];
      validAccounts = (await DB_UserScoped.getValidAccountsForUser(currentUser));
      if (Manager.IsValid(validAccounts)) {
        for (i = 0, len = validAccounts.length; i < len; i++) {
          account = validAccounts[i];
          if (Manager.IsValid(account) && (Manager.IsValid(account.userKey) || Manager.IsValid(account.key))) {
            options.push({
              value: account.key || account.userKey,
              label: (account != null ? account.name : void 0) || (account != null ? (ref = account.general) != null ? ref.name : void 0 : void 0)
            });
          }
        }
      }
      return options;
    },
    ShareWithFromKeys: function(accountKeys, users, labelsOnly = false, currentUserKey) {
      var i, key, len, options, user;
      options = [];
      accountKeys = accountKeys != null ? accountKeys.filter(function(x) {
        return x !== currentUserKey;
      }) : void 0;
      if (Manager.IsValid(accountKeys) && Manager.IsValid(users)) {
        for (i = 0, len = accountKeys.length; i < len; i++) {
          key = accountKeys[i];
          user = users != null ? users.find((x) => {
            return (x != null ? x.key : void 0) === key;
          }) : void 0;
          if (Manager.IsValid(user)) {
            options.push({
              value: user != null ? user.key : void 0,
              label: StringManager.GetFirstNameAndLastInitial(user != null ? user.name : void 0)
            });
          }
        }
      }
      if (labelsOnly) {
        return options.map((x) => {
          return x != null ? x.label : void 0;
        });
      }
      return options;
    }
  },
  // GET DEFAULT
  GetDefault: {
    ExpenseCategories: function() {
      var category, i, len, options, ref;
      options = [];
      ref = Object.keys(ExpenseCategories);
      for (i = 0, len = ref.length; i < len; i++) {
        category = ref[i];
        options.push({
          value: category,
          label: category
        });
      }
      return options;
    },
    ValueRecordTypes: function() {
      return [
        {
          label: "Expenses",
          value: "expenses"
        },
        {
          label: "Chats",
          value: "chats"
        }
      ];
    },
    ExpenseSortByTypes: function() {
      var key, options, value;
      options = [];
      for (key in ExpenseSortByTypes) {
        value = ExpenseSortByTypes[key];
        options.push({
          value: key,
          label: value
        });
      }
      return options;
    },
    Reminders: [
      {
        label: "5 Minutes Before",
        value: "fiveMinutes"
      },
      {
        label: "30 Minutes Before",
        value: "halfHour"
      },
      {
        label: "1 Hour Before",
        value: "hour"
      },
      {
        label: "At Event Time",
        value: "timeOfEvent"
      }
    ],
    ShareWith: function(children, coParents) {
      var childAccounts, merged, options, ref;
      if (!(Manager.IsValid(children) || Manager.IsValid(coParents))) {
        return [];
      }
      options = [];
      childAccounts = (ref = children || []) != null ? ref.filter(function(x) {
        return x != null ? x.userKey : void 0;
      }) : void 0;
      coParents = coParents || [];
      merged = DatasetManager.CombineArrays(childAccounts, coParents);
      options = merged.map(function(x) {
        var ref1, ref2, ref3;
        return {
          label: (ref1 = StringManager.GetFirstNameOnly(x != null ? (ref2 = x.general) != null ? ref2.name : void 0 : void 0)) != null ? ref1 : StringManager.GetFirstNameAndLastInitial(x != null ? x.name : void 0),
          value: (ref3 = x != null ? x.userKey : void 0) != null ? ref3 : x != null ? x.key : void 0
        };
      });
      return options;
    },
    CoParents: function(users) {
      var i, len, options, user;
      options = [];
      if (Manager.IsValid(users)) {
        for (i = 0, len = users.length; i < len; i++) {
          user = users[i];
          options.push({
            value: user != null ? user.userKey : void 0,
            label: StringManager != null ? StringManager.UppercaseFirstLetterOfAllWords(user != null ? user.name : void 0) : void 0
          });
        }
      }
      return options;
    },
    Children: function(children) {
      var child, i, len, options, ref;
      options = [];
      if (Manager.IsValid(children)) {
        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          options.push({
            label: StringManager.FormatTitle(child != null ? (ref = child.general) != null ? ref.name : void 0 : void 0),
            value: child != null ? child.id : void 0
          });
        }
      }
      return options;
    }
  }
};

export default DropdownManager;

//# sourceMappingURL=dropdownManager.js.map
