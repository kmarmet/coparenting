// Generated by CoffeeScript 2.7.0
var SecurityManager,
  indexOf = [].indexOf;

import Manager from '../managers/manager';

import DB from "../database/DB";

import DateManager from "../managers/dateManager";

import _ from "lodash";

import DB_UserScoped from "../database/db_userScoped";

import DatasetManager from "./datasetManager";

SecurityManager = {
  getSharedItems: async function(currentUser, table) {
    var accountKey, i, item, j, len, len1, linkedAccountKeys, linkedAccounts, ref, sharedItems, userAccountItems;
    linkedAccounts = (await DB_UserScoped.getLinkedAccounts(currentUser));
    linkedAccountKeys = linkedAccounts.accountKeys;
    sharedItems = [];
    if (Manager.IsValid(currentUser) && Manager.IsValid(linkedAccountKeys)) {
      for (i = 0, len = linkedAccountKeys.length; i < len; i++) {
        accountKey = linkedAccountKeys[i];
        userAccountItems = (await DB.getTable(`${table}/${accountKey}`));
        for (j = 0, len1 = userAccountItems.length; j < len1; j++) {
          item = userAccountItems[j];
          if (Manager.IsValid(item != null ? item.shareWith : void 0)) {
            if (item != null ? (ref = item.shareWith) != null ? ref.includes(currentUser != null ? currentUser.key : void 0) : void 0 : void 0) {
              sharedItems.push(item);
            }
          }
        }
      }
    }
    return DatasetManager.GetValidArray(sharedItems);
  },
  getShareWithItems: async function(currentUser, table) {
    var child, childItems, coparent, coparentItems, i, item, j, k, l, len, len1, len2, len3, len4, len5, m, n, parent, parentItems, ref, ref1, ref2, ref3, ref4, ref5, sharedItems;
    sharedItems = [];
    //   COPARENT ACCOUNTS
    if (Manager.IsValid(currentUser) && Manager.IsValid(currentUser != null ? currentUser.coparents : void 0)) {
      ref = currentUser != null ? currentUser.coparents : void 0;
      for (i = 0, len = ref.length; i < len; i++) {
        coparent = ref[i];
        coparentItems = (await DB.getTable(`${table}/${coparent != null ? coparent.userKey : void 0}`));
        for (j = 0, len1 = coparentItems.length; j < len1; j++) {
          item = coparentItems[j];
          if (Manager.IsValid(item != null ? item.shareWith : void 0)) {
            if (item != null ? (ref1 = item.shareWith) != null ? ref1.includes(currentUser != null ? currentUser.key : void 0) : void 0 : void 0) {
              sharedItems.push(item);
            }
          }
        }
      }
    }
    //   PARENT ACCOUNTS
    if (Manager.IsValid(currentUser) && Manager.IsValid(currentUser != null ? currentUser.parents : void 0)) {
      ref2 = currentUser != null ? currentUser.parents : void 0;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        parent = ref2[k];
        parentItems = (await DB.getTable(`${table}/${parent != null ? parent.userKey : void 0}`));
        for (l = 0, len3 = parentItems.length; l < len3; l++) {
          item = parentItems[l];
          if (Manager.IsValid(item != null ? item.shareWith : void 0)) {
            if (item != null ? (ref3 = item.shareWith) != null ? ref3.includes(currentUser != null ? currentUser.key : void 0) : void 0 : void 0) {
              sharedItems.push(item);
            }
          }
        }
      }
    }
    //   CHILD ACCOUNTS
    if (Manager.IsValid(currentUser) && Manager.IsValid(currentUser != null ? currentUser.children : void 0)) {
      ref4 = currentUser != null ? currentUser.children : void 0;
      for (m = 0, len4 = ref4.length; m < len4; m++) {
        child = ref4[m];
        childItems = (await DB.getTable(`${table}/${child != null ? child.userKey : void 0}`));
        for (n = 0, len5 = childItems.length; n < len5; n++) {
          item = childItems[n];
          if (Manager.IsValid(item != null ? item.shareWith : void 0)) {
            if (item != null ? (ref5 = item.shareWith) != null ? ref5.includes(currentUser != null ? currentUser.key : void 0) : void 0 : void 0) {
              sharedItems.push(item);
            }
          }
        }
      }
    }
    sharedItems = _.flattenDeep(sharedItems);
    return DatasetManager.GetValidArray(sharedItems);
  },
  getCalendarEvents: async function(currentUser) {
    var allEvents, event, i, len, returnRecords, sharedEvents, users;
    users = (await DB.getTable(DB.tables.users));
    currentUser = users.find(function(x) {
      return x.email === (currentUser != null ? currentUser.email : void 0);
    });
    returnRecords = [];
    allEvents = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser != null ? currentUser.key : void 0}`));
    sharedEvents = (await SecurityManager.getShareWithItems(currentUser, DB.tables.calendarEvents));
    if (Manager.IsValid(allEvents)) {
      for (i = 0, len = allEvents.length; i < len; i++) {
        event = allEvents[i];
        if (DateManager.isValidDate(event.startDate)) {
          if (event.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
            returnRecords.push(event);
          }
        }
      }
    }
    if (Manager.IsValid(sharedEvents)) {
      returnRecords = [...sharedEvents, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getUserVisitationHolidays: async function(currentUser) {
    var allEvents, event, i, len, returnRecords, sharedEvents;
    returnRecords = [];
    allEvents = (await DB.getTable(`${DB.tables.calendarEvents}/${currentUser != null ? currentUser.key : void 0}`));
    sharedEvents = (await SecurityManager.getShareWithItems(currentUser, DB.tables.calendarEvents));
    if (Manager.IsValid(allEvents)) {
      for (i = 0, len = allEvents.length; i < len; i++) {
        event = allEvents[i];
        if (DateManager.isValidDate(event.startDate)) {
          if (event.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
            returnRecords.push(event);
          }
        }
      }
    }
    if (Manager.IsValid(sharedEvents)) {
      returnRecords = [...sharedEvents, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getExpenses: async function(currentUser) {
    var allExpenses, expense, i, len, returnRecords, sharedExpenses;
    returnRecords = [];
    allExpenses = DatasetManager.GetValidArray(DB.getTable(`${DB.tables.expenses}/${currentUser != null ? currentUser.key : void 0}`));
    sharedExpenses = (await SecurityManager.getShareWithItems(currentUser, DB.tables.expenses));
    if (Manager.IsValid(allExpenses)) {
      for (i = 0, len = allExpenses.length; i < len; i++) {
        expense = allExpenses[i];
        if (expense.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(expense);
        }
      }
    }
    if (Manager.IsValid(sharedExpenses)) {
      returnRecords = [...sharedExpenses, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getSwapRequests: async function(currentUser) {
    var allRequests, i, len, request, returnRecords, sharedSwaps;
    returnRecords = [];
    allRequests = DatasetManager.GetValidArray((await DB.getTable(`${DB.tables.swapRequests}/${currentUser != null ? currentUser.key : void 0}`)));
    sharedSwaps = (await SecurityManager.getShareWithItems(currentUser, DB.tables.swapRequests));
    if (Manager.IsValid(allRequests)) {
      for (i = 0, len = allRequests.length; i < len; i++) {
        request = allRequests[i];
        if (request.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(request);
        }
      }
    }
    if (Manager.IsValid(sharedSwaps)) {
      returnRecords = [...sharedSwaps, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getTransferChangeRequests: async function(currentUser) {
    var allRequests, i, len, request, returnRecords, sharedTransfers;
    returnRecords = [];
    allRequests = DatasetManager.GetValidArray((await DB.getTable(`${DB.tables.transferChangeRequests}/${currentUser != null ? currentUser.key : void 0}`)));
    sharedTransfers = (await SecurityManager.getShareWithItems(currentUser, DB.tables.transferChangeRequests));
    if (Manager.IsValid(allRequests)) {
      for (i = 0, len = allRequests.length; i < len; i++) {
        request = allRequests[i];
        if (request.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(request);
        }
      }
    }
    if (Manager.IsValid(sharedTransfers)) {
      returnRecords = [...sharedTransfers, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getDocuments: async function(currentUser) {
    var allDocs, doc, i, len, returnRecords, sharedDocs;
    returnRecords = [];
    allDocs = DatasetManager.GetValidArray((await DB.getTable(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`)));
    sharedDocs = (await SecurityManager.getShareWithItems(currentUser, DB.tables.documents));
    if (Manager.IsValid(allDocs)) {
      for (i = 0, len = allDocs.length; i < len; i++) {
        doc = allDocs[i];
        if (doc.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(doc);
        }
      }
    }
    if (Manager.IsValid(sharedDocs)) {
      returnRecords = [...sharedDocs, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getMemories: async function(currentUser) {
    var allMemories, i, len, memory, returnRecords, sharedMemories;
    returnRecords = [];
    allMemories = DatasetManager.GetValidArray((await DB.getTable(`${DB.tables.memories}/${currentUser != null ? currentUser.key : void 0}`)));
    sharedMemories = (await SecurityManager.getShareWithItems(currentUser, DB.tables.memories));
    if (Manager.IsValid(allMemories)) {
      for (i = 0, len = allMemories.length; i < len; i++) {
        memory = allMemories[i];
        if (memory.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(memory);
        }
      }
    }
    if (Manager.IsValid(sharedMemories)) {
      returnRecords = [...sharedMemories, ...returnRecords];
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getInputSuggestions: async function(currentUser) {
    var i, len, returnRecords, suggestion, suggestions;
    returnRecords = [];
    suggestions = DatasetManager.GetValidArray((await DB.getTable(DB.tables.suggestions)));
    if (Manager.IsValid(suggestions)) {
      for (i = 0, len = suggestions.length; i < len; i++) {
        suggestion = suggestions[i];
        if (suggestion.ownerKey === (currentUser != null ? currentUser.key : void 0)) {
          returnRecords.push(suggestion);
        }
      }
    }
    return DatasetManager.GetValidArray(returnRecords);
  },
  getChats: async function(currentUser) {
    var chats, securedChats;
    chats = DatasetManager.GetValidArray((await DB.getTable(`${DB.tables.chats}/${currentUser != null ? currentUser.key : void 0}`)));
    securedChats = [];
    return securedChats;
  },
  getCoparentChats: async function(currentUser) {
    var activeChats, allChats, allChatsFlattened, chat, i, len, members, ref;
    allChats = (await DB.getTable('chats'));
    activeChats = [];
    allChatsFlattened = allChats;
    if (Manager.IsValid(allChatsFlattened)) {
      for (i = 0, len = allChatsFlattened.length; i < len; i++) {
        chat = allChatsFlattened[i];
        members = chat.members.map(function(x) {
          return x.key;
        });
        if (ref = currentUser != null ? currentUser.key : void 0, indexOf.call(members, ref) >= 0) {
          activeChats.push(chat);
        }
      }
    }
    return activeChats;
  }
};

export default SecurityManager;

//# sourceMappingURL=securityManager.js.map
