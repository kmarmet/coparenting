// Generated by CoffeeScript 2.7.0
var SelectDropdownManager;

import Manager from "./manager";

import StringManager from "./stringManager";

import CalMapper from "../mappers/calMapper";

SelectDropdownManager = {
  GetReadableReminderTimes: function(reminderTimes) {
    var i, len, readableTimes, time;
    readableTimes = [];
    if (Manager.IsValid(reminderTimes)) {
      for (i = 0, len = reminderTimes.length; i < len; i++) {
        time = reminderTimes[i];
        if (Manager.IsValid(time, true)) {
          readableTimes.push(CalMapper.GetShortenedReadableReminderTime(time));
        }
      }
    }
    return readableTimes;
  },
  GetSelected: {
    Reminders: function(reminders) {
      var i, len, options, reminder;
      options = [];
      if (Manager.IsValid(reminders)) {
        for (i = 0, len = reminders.length; i < len; i++) {
          reminder = reminders[i];
          options.push({
            label: CalMapper.GetShortenedReadableReminderTime(reminder),
            value: reminder
          });
        }
      }
      return options;
    },
    Children: function(childNames) {
      var childName, i, len, options;
      options = [];
      if (Manager.IsValid(childNames)) {
        for (i = 0, len = childNames.length; i < len; i++) {
          childName = childNames[i];
          options.push({
            label: StringManager.FormatTitle(childName),
            value: childName
          });
        }
      }
      return options;
    },
    ShareWith: function(accountsFromKeys) {
      var i, len, options, user;
      options = [];
      if (Manager.IsValid(accountsFromKeys)) {
        for (i = 0, len = accountsFromKeys.length; i < len; i++) {
          user = accountsFromKeys[i];
          options.push({
            value: user != null ? user.key : void 0,
            label: StringManager.GetFirstNameAndLastInitial(user != null ? user.name : void 0)
          });
        }
      }
      return options;
    },
    ShareWithFromKeys: function(accountKeys, users, labelsOnly = false) {
      var i, key, len, options, user;
      options = [];
      if (Manager.IsValid(accountKeys) && Manager.IsValid(users)) {
        for (i = 0, len = accountKeys.length; i < len; i++) {
          key = accountKeys[i];
          user = users != null ? users.find((x) => {
            return (x != null ? x.key : void 0) === key;
          }) : void 0;
          if (Manager.IsValid(user)) {
            options.push({
              value: user != null ? user.key : void 0,
              label: StringManager.GetFirstNameAndLastInitial(user != null ? user.name : void 0)
            });
          }
        }
      }
      if (labelsOnly) {
        return options.map((x) => {
          return x != null ? x.label : void 0;
        });
      }
      return options;
    }
  },
  GetDefault: {
    Reminders: [
      {
        label: "5 Minutes Before",
        value: "fiveMinutes"
      },
      {
        label: "30 Minutes Before",
        value: "halfHour"
      },
      {
        label: "1 Hour Before",
        value: "hour"
      },
      {
        label: "At Event Time",
        value: "timeOfEvent"
      }
    ],
    ShareWith: function(shareWith) {
      var i, len, options, user;
      options = [];
      if (Manager.IsValid(shareWith)) {
        for (i = 0, len = shareWith.length; i < len; i++) {
          user = shareWith[i];
          options.push({
            value: user != null ? user.key : void 0,
            label: StringManager != null ? StringManager.UppercaseFirstLetterOfAllWords(user != null ? user.name : void 0) : void 0
          });
        }
      }
      return options;
    },
    CoParents: function(users) {
      var i, len, options, user;
      options = [];
      if (Manager.IsValid(users)) {
        for (i = 0, len = users.length; i < len; i++) {
          user = users[i];
          options.push({
            value: user != null ? user.key : void 0,
            label: StringManager != null ? StringManager.UppercaseFirstLetterOfAllWords(user != null ? user.name : void 0) : void 0
          });
        }
      }
      return options;
    },
    Children: function(children) {
      var child, i, len, options, ref;
      options = [];
      if (Manager.IsValid(children)) {
        for (i = 0, len = children.length; i < len; i++) {
          child = children[i];
          options.push({
            label: StringManager.FormatTitle(child != null ? (ref = child.general) != null ? ref.name : void 0 : void 0),
            value: child != null ? child.id : void 0
          });
        }
      }
      return options;
    }
  }
};

export default SelectDropdownManager;

//# sourceMappingURL=selectDropdownManager.js.map
