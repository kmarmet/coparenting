// Generated by CoffeeScript 2.7.0
var SelectDropdownManager;

import Manager from "./manager";

import StringManager from "./stringManager";

import CalMapper from "../mappers/calMapper";

SelectDropdownManager = {
  GetReadableReminderTimes: function(reminderTimes) {
    var i, len, readableTimes, time;
    readableTimes = [];
    if (Manager.IsValid(reminderTimes)) {
      for (i = 0, len = reminderTimes.length; i < len; i++) {
        time = reminderTimes[i];
        if (Manager.IsValid(time, true)) {
          readableTimes.push(CalMapper.GetShortenedReadableReminderTime(time));
        }
      }
    }
    return readableTimes;
  },
  GetSelected: {
    ReminderOptions: function(reminders) {
      var i, len, options, reminder;
      options = [];
      if (Manager.IsValid(reminders)) {
        for (i = 0, len = reminders.length; i < len; i++) {
          reminder = reminders[i];
          options.push({
            label: CalMapper.GetShortenedReadableReminderTime(reminder),
            value: reminder
          });
        }
      }
      return options;
    },
    ShareWith: function(names) {
      var i, len, name, options;
      options = [];
      for (i = 0, len = names.length; i < len; i++) {
        name = names[i];
        options.push({
          value: name,
          label: name
        });
      }
      return options;
    }
  },
  GetDefault: {
    ReminderOptions: [
      {
        label: "5 Minutes Before",
        value: "fiveMinutes"
      },
      {
        label: "30 Minutes Before",
        value: "halfHour"
      },
      {
        label: "1 Hour Before",
        value: "hour"
      },
      {
        label: "At Event Time",
        value: "timeOfEvent"
      }
    ],
    ShareWith: function(shareWith) {
      var i, len, options, user;
      options = [];
      if (Manager.IsValid(shareWith)) {
        for (i = 0, len = shareWith.length; i < len; i++) {
          user = shareWith[i];
          options.push({
            value: user != null ? user.key : void 0,
            label: StringManager != null ? StringManager.uppercaseFirstLetterOfAllWords(user != null ? user.name : void 0) : void 0
          });
        }
      }
      return options;
    },
    Users: function(users) {
      var i, len, options, ref, user;
      options = [];
      if (Manager.IsValid(users)) {
        for (i = 0, len = users.length; i < len; i++) {
          user = users[i];
          if ((user != null ? user.accountType : void 0) === 'parent') {
            options.push({
              value: user != null ? user.key : void 0,
              label: StringManager != null ? StringManager.uppercaseFirstLetterOfAllWords(user != null ? user.name : void 0) : void 0
            });
          }
          if ((user != null ? user.accountType : void 0) === 'child') {
            options.push({
              value: user != null ? user.userKey : void 0,
              label: StringManager != null ? StringManager.uppercaseFirstLetterOfAllWords(user != null ? (ref = user.general) != null ? ref.name : void 0 : void 0) : void 0
            });
          }
        }
      }
      return options;
    },
    GetSelectOptions: function(optionsArray = [], isUsers = false, isStringsOnly = false, isReminders = false, isFormattedReminders = false) {
      var i, len, option, options, ref;
      options = [];
      if (Manager.IsValid(optionsArray)) {
        for (i = 0, len = optionsArray.length; i < len; i++) {
          option = optionsArray[i];
          // Users
          if (isUsers) {
            if ((option != null ? option.accountType : void 0) === 'parent') {
              options.push({
                value: option != null ? option.key : void 0,
                label: StringManager != null ? StringManager.uppercaseFirstLetterOfAllWords(option != null ? option.name : void 0) : void 0
              });
            }
            if ((option != null ? option.accountType : void 0) === 'child') {
              options.push({
                value: option != null ? option.userKey : void 0,
                label: StringManager != null ? StringManager.uppercaseFirstLetterOfAllWords(option != null ? (ref = option.general) != null ? ref.name : void 0 : void 0) : void 0
              });
            }
          // Strings
          } else if (isStringsOnly) {
            options.push({
              label: StringManager.uppercaseFirstLetterOfAllWords(option),
              value: option
            });
          }
        }
      }
      return options;
    }
  }
};

export default SelectDropdownManager;

//# sourceMappingURL=selectDropdownManager.js.map
