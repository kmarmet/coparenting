// Generated by CoffeeScript 2.7.0
var DocumentsManager

import {child, getDatabase, ref, set} from 'firebase/database'

import DB from '../database/DB'

import DatasetManager from './datasetManager'
import Manager from './manager'

import StringManager from './stringManager'

export default DocumentsManager = {
    DeleteDocsWithIds: async function (
        idsToDelete,
        currentUser,
        callback = () => {
            return {}
        }
    ) {
        var docId, docs, i, len, results, thisDoc
        results = []
        for (i = 0, len = idsToDelete.length; i < len; i++) {
            docId = idsToDelete[i]
            docs = DatasetManager.GetValidArray(await DB.getTable(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`))
            if (Manager.IsValid(docs)) {
                results.push(
                    await (async function () {
                        var j, len1, results1
                        results1 = []
                        for (j = 0, len1 = docs.length; j < len1; j++) {
                            thisDoc = docs[j]
                            if (thisDoc.id === docId) {
                                await DB.deleteById(`${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`, docId)
                                thisDoc.name = StringManager.formatFileName(thisDoc.name)
                                //            await FirebaseStorage.deleteFile("#{FirebaseStorage.directories.documents}/#{currentUser.key}/#{thisDoc.name}")
                                if (callback) {
                                    results1.push(callback(docId))
                                } else {
                                    results1.push(void 0)
                                }
                            } else {
                                results1.push(void 0)
                            }
                        }
                        return results1
                    })()
                )
            } else {
                results.push(void 0)
            }
        }
        return results
    },
    AddToDocumentsTable: async function (currentUser, existingDocuments, data) {
        var dbRef, error
        dbRef = ref(getDatabase())
        if (Manager.IsValid(existingDocuments)) {
            existingDocuments = [...existingDocuments, data].filter(function (item) {
                return item
            })
        } else {
            existingDocuments = [data].filter(function (item) {
                return item
            })
        }
        try {
            return await set(child(dbRef, `${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`), existingDocuments)
        } catch (error1) {
            error = error1
            return console.log(`Error: ${error} | Path: ${DB.tables.documents}/${currentUser != null ? currentUser.key : void 0}`)
        }
    },
    IsDocumentOrImage: function (file) {
        var extension
        extension = StringManager.GetFileExtension(file != null ? file.name : void 0)
        if (extension === 'image/png' || extension === 'image/jpeg' || extension === 'image/jpg' || extension === 'image/gif') {
            return 'image'
        } else if (
            extension === 'application/pdf' ||
            extension === 'application/msword' ||
            extension === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        ) {
            return 'document'
        }
    },
}

//# sourceMappingURL=documentsManager.js.map