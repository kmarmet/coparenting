// Generated by CoffeeScript 2.7.0
var StringManager;

import lzstring from "lz-string";

import Manager from "./manager";

StringManager = {
  FormatAsWholeNumber: function(number) {
    var asString, dotIndex;
    asString = number.toString();
    if (asString.indexOf('.') > -1) {
      dotIndex = asString.indexOf('.');
      return parseInt(asString.substring(0, dotIndex));
    }
  },
  GetFirstNameAndLastInitial: function(fullName) {
    var firstName, lastNameInitial, names;
    if (Manager.isValid(fullName, true)) {
      names = fullName.split(" ");
      firstName = names[0];
      lastNameInitial = names.length > 1 ? names[names.length - 1][0] : "";
      return `${firstName} ${lastNameInitial}`;
    } else {
      return fullName;
    }
  },
  getReadablePhoneNumber: function(phoneNumber) {
    var cleaned, formattedPhone, match;
    formattedPhone = phoneNumber;
    cleaned = ('' + phoneNumber).replace(/\D/g, '');
    // Format the number with dashes
    match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
    if (match) {
      return `${match[1]}-${match[2]}-${match[3]}`;
    }
    return formattedPhone;
  },
  getFirstNameOnly: function(name) {
    var returnString;
    if (!name) {
      return name;
    }
    returnString = name.toString();
    if (!returnString || returnString.length === 0) {
      return returnString;
    }
    returnString = returnString.split(' ')[0];
    return StringManager.uppercaseFirstLetterOfAllWords(returnString);
  },
  RemoveAllLetters: function(input) {
    return input.replace(/[a-zA-Z]/g, '');
  },
  isAllUppercase: function(input) {
    return input === input.toUpperCase();
  },
  FormatPhone: function(input) {
    if (!Manager.isValid(input) || (input != null ? input.length : void 0) === 0) {
      return input;
    }
    input = input != null ? input.toString().replace(/-/g, '').replace(/\s+/g, '').replace(/\(/g, '').replace(/\)/g, '').replace(/\+/g, '').replace(/\+1/g, '') : void 0;
    return input;
  },
  formatPhoneWithDashes: function(phone) {
    var cleaned, match;
    cleaned = ('' + phone).replace(/\D/g, '');
    match = cleaned.match(/^(\d{3})(\d{3})(\d{4})$/);
    if (match) {
      return `${match[1]}-${match[2]}-${match[3]}`;
    }
    return phone;
  },
  compressString: function(string) {
    var compressed;
    // Import the lz-string library dependency
    compressed = lzstring.compress(string);
    console.log('Original:', string.length, 'bytes');
    console.log('Compressed:', compressed.length, 'bytes');
    return compressed;
  },
  deCompressString: function(string) {
    var decompressed;
    // Import the lz-string library dependency
    console.log(string);
    decompressed = lzstring.decompress(string);
    console.log(decompressed);
    return decompressed;
  },
  typoCorrection: async function(text) {
    var error, fixedText, myHeaders, raw, requestOptions, response, result;
    fixedText = '';
    myHeaders = new Headers();
    myHeaders.append("Content-Type", "application/json");
    raw = JSON.stringify({
      key: process.env.REACT_APP_SAPLER_TONE_API_KEY,
      text: text,
      session_id: Manager.getUid(),
      auto_apply: true,
      lang: 'en',
      variety: 'us-variety'
    });
    requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: raw,
      redirect: "follow"
    };
    try {
      response = (await fetch("https://api.sapling.ai/api/v1/spellcheck", requestOptions));
      result = (await response.json());
      fixedText = result.applied_text;
      console.log(result);
    } catch (error1) {
      error = error1;
      console.error(error);
    }
    return fixedText;
  },
  formatFileName: function(fileName) {
    return fileName.replaceAll(' ', '-').replaceAll('(', '').replaceAll(')', '');
  },
  spaceBetweenWords: function(input) {
    return input.toString().replace(/([a-z])([A-Z])/g, '$1 $2');
  },
  addLongTextClass: function(text) {
    if (StringManager.GetWordCount(text) > 10) {
      return "long-text";
    } else {
      return '';
    }
  },
  getFileExtension: function(fileName) {
    return fileName.split('.').pop();
  },
  lowercaseShouldBeLowercase: function(input) {
    return input.replace('Of', 'of');
  },
  removeFileExtension: function(input) {
    return input.replace(/\.[^\/.]+$/, '');
  },
  GetWordCount: function(input) {
    var ref, ref1;
    if (Manager.isValid(input, true)) {
      return input != null ? (ref = input.trim()) != null ? (ref1 = ref.split(/\s+/)) != null ? ref1.length : void 0 : void 0 : void 0;
    } else {
      return 0;
    }
  },
  stringHasNumbers: function(input) {
    return /\d/.test(input);
  },
  capitalizeFirstWord: function(str) {
    var capitalizedFirstWord, firstWord;
    firstWord = str.split(" ")[0].toUpperCase();
    capitalizedFirstWord = firstWord.charAt(0).toUpperCase() + firstWord.slice(1);
    return firstWord + str.slice(str[1], str.length);
  },
  toCamelCase: function(str) {
    str = str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
      if (index === 0) {
        return word.toLowerCase();
      } else {
        return word.toUpperCase();
      }
    });
    str = str.replace(/\s+/g, '').replaceAll(" ", "");
    return str;
  },
  removeSpecialChars: function(str) {
    return str.replaceAll("~", "").replaceAll("#", "").replaceAll("^", "").replaceAll("`", "").replaceAll("`", "");
  },
  formatDbProp: function(prop) {
    prop = StringManager.toCamelCase(prop).replaceAll(' ', '');
    return StringManager.removeSpecialChars(prop);
  },
  addSpaceBetweenWords: function(str) {
    str = str.replace(/([a-z])([A-Z])/, '$1 $2');
    return str;
  },
  getFirstWord: function(input) {
    return input.toString().replace(/ .*/, '');
  },
  uppercaseFirstLetterOfAllWords: function(input) {
    var words;
    if (!Manager.isValid(input, true)) {
      return input;
    }
    words = input != null ? input.toString() : void 0;
    if (words && words !== void 0) {
      if ((words != null ? words.indexOf('-') : void 0) > -1) {
        words = input.replace(/-/g, ' ').split(' ');
      } else {
        words = words != null ? words.split(' ') : void 0;
      }
      words = words != null ? words.filter(function(x) {
        return x.length > 0;
      }) : void 0;
      words = words != null ? words.map(function(word) {
        return word[0].toUpperCase() + word.substr(1);
      }) : void 0;
      if ((words != null ? words.length : void 0) > 0) {
        words = words != null ? words.join(' ') : void 0;
      }
    }
    return words;
  },
  formatEventTitle: function(title) {
    if (title && title.length > 0) {
      title = StringManager.uppercaseFirstLetterOfAllWords(title);
      title = StringManager.FormatTitle(title);
      return title;
    }
  },
  FormatTitle: function(title, uppercase = true) {
    if (!title || (title != null ? title.length : void 0) === 0) {
      return title;
    }
    if (!Manager.isValid(title, true)) {
      return title;
    }
    if (uppercase) {
      title = StringManager.uppercaseFirstLetterOfAllWords(title);
    }
    title = title.toString().replaceAll(" To ", " to ").replaceAll(" A ", " a ").replaceAll(" An ", " an ").replaceAll(" Or ", " or ").replaceAll(" Vs ", " vs ").replaceAll(" With ", " with ").replaceAll(" At ", " at ").replaceAll(" About ", " about ").replaceAll(" From ", " from ").replaceAll(" The ", " the ").replaceAll(" For ", " for ").replaceAll(" Thru ", " thru ").replaceAll(" Has ", " has ").replaceAll(" And ", " and ").replaceAll(" Is ", " is ").replaceAll(" Not ", " not ").replaceAll(" Off ", " off ").replaceAll(" But ", " but ").replaceAll(" By ", " by ").replaceAll(" In ", " in ").replaceAll(" Of ", " of ").replaceAll(" On ", " on ").replaceAll(" Per ", " per ").replaceAll(" Up ", " up ").replaceAll(" Via ", " via ");
    title = StringManager.removeSpecialChars(title);
    return title;
  }
};

export default StringManager;

//# sourceMappingURL=stringManager.js.map
