// Generated by CoffeeScript 2.7.0
var DomManager;

import Manager from "./manager";

import DatasetManager from "./datasetManager";

import DB_UserScoped from "../database/db_userScoped";

import CalMapper from "../mappers/calMapper";

import DateManager from "./dateManager";

DomManager = {
  AnimateDelayStyle: function(index, delay = .2) {
    return {
      animationDelay: `${index * delay}s`
    };
  },
  Animate: {
    RemoveAnimationClasses: function(classOfElementsToAnimate, classToRemove) {
      var element, i, len, results;
      if (Manager.IsValid(classOfElementsToAnimate)) {
        classOfElementsToAnimate = document.querySelectorAll(`${classOfElementsToAnimate}`);
        results = [];
        for (i = 0, len = classOfElementsToAnimate.length; i < len; i++) {
          element = classOfElementsToAnimate[i];
          results.push(element.classList.remove(classToRemove));
        }
        return results;
      }
    },
    FadeInRight: function(variableToCheck, fastSlowOrDefault = "") {
      var ref, ref1;
      if (typeof variableToCheck === 'boolean') {
        if (variableToCheck === true) {
          return `animate__animated animate__fadeInRight ${(ref = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref : {
            [`animate__${fastSlowOrDefault}`]: ''
          }}`;
        } else {
          return 'animate__animated animate__fadeOut';
        }
      }
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__fadeInRight ${(ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref1 : {
          [`animate__${fastSlowOrDefault}`]: ''
        }}`;
      } else {
        return 'animate__animated animate__fadeOut';
      }
    },
    FadeInUp: function(variableToCheck, fastSlowOrDefault = "") {
      var ref, ref1;
      if (typeof variableToCheck === 'boolean') {
        if (variableToCheck === true) {
          return `animate__animated animate__fadeInUp ${(ref = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref : {
            [`animate__${fastSlowOrDefault}`]: ''
          }}`;
        } else {
          return 'animate__animated animate__fadeOutDown';
        }
      }
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__fadeInUp ${(ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref1 : {
          [`animate__${fastSlowOrDefault}`]: ''
        }}`;
      } else {
        return 'animate__animated animate__fadeOutDown';
      }
    },
    FadeInDown: function(variableToCheck, fastSlowOrDefault = "") {
      var ref, ref1;
      if (typeof variableToCheck === 'boolean') {
        if (variableToCheck === true) {
          return `animate__animated animate__fadeInDown ${(ref = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref : {
            [`animate__${fastSlowOrDefault}`]: ''
          }}`;
        } else {
          return 'animate__animated animate__fadeOutUp';
        }
      }
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__fadeInDown ${(ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref1 : {
          [`animate__${fastSlowOrDefault}`]: ''
        }}`;
      } else {
        return 'animate__animated animate__fadeOutUp';
      }
    },
    ZoomIn: function(variableToCheck, fastSlowOrDefault = "") {
      var ref, ref1;
      if (typeof variableToCheck === 'boolean') {
        if (variableToCheck === true) {
          return `animate__animated animate__zoomIn ${(ref = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref : {
            [`animate__${fastSlowOrDefault}`]: ''
          }}`;
        } else {
          return 'animate__animated animate__zoomOut';
        }
      }
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__zoomIn ${(ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref1 : {
          [`animate__${fastSlowOrDefault}`]: ''
        }}`;
      } else {
        return 'animate__animated animate__zoomOut';
      }
    },
    ZoomInDown: function(variableToCheck, fastSlowOrDefault = "") {
      var ref, ref1;
      if (typeof variableToCheck === 'boolean') {
        if (variableToCheck === true) {
          return `animate__animated animate__zoomInDown ${(ref = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref : {
            [`animate__${fastSlowOrDefault}`]: ''
          }}`;
        } else {
          return 'animate__animated animate__zoomOutDown';
        }
      }
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__zoomInDown ${(ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null ? ref1 : {
          [`animate__${fastSlowOrDefault}`]: ''
        }}`;
      } else {
        return 'animate__animated animate__zoomOutDown';
      }
    },
    FadeIn: function(variableToCheck, fastSlowOrDefault = "") {
      if (Manager.IsValid(variableToCheck)) {
        return `animate__animated animate__fadeIn animate__${fastSlowOrDefault}`;
      } else {
        return 'animate__animated animate__fadeOut';
      }
    },
    AnimateDelayStyle: function(index, delay = .2) {
      return {
        animationDelay: `${index * delay}s`
      };
    }
  },
  AnimateClasses: {
    names: {
      fadeInUp: 'fadeInUp',
      fadeInDown: 'fadeInDown',
      fadeInRight: 'fadeInRight',
      slideInLeft: 'slideInLeft',
      slideInRight: 'slideInRight',
      fadeIn: 'fadeIn',
      zoomIn: 'zoomIn',
      default: 'animate__animated',
      slow: 'animate__slow',
      faster: 'animate__faster',
      slower: 'animate__slower',
      zoomInDown: 'zoomInDown'
    },
    zoomIn: {
      enter: 'animate__zoomIn',
      exit: 'animate__zoomOut'
    },
    zoomInDown: {
      enter: 'animate__zoomInDown',
      exit: 'animate__zoomOutDown'
    },
    fadeIn: {
      enter: 'animate__fadeIn',
      exit: 'animate__fadeOut'
    },
    slideInLeft: {
      enter: 'animate__slideInLeft',
      exit: 'animate__slideOutLeft'
    },
    slideInRight: {
      enter: 'animate__slideInRight',
      exit: 'animate__slideOutRight'
    },
    fadeInUp: {
      enter: 'animate__fadeInUp',
      exit: 'animate__fadeOutDown'
    },
    fadeInDown: {
      enter: 'animate__fadeInDown',
      exit: 'animate__fadeOutUp'
    },
    fadeInRight: {
      enter: 'animate__fadeInRight',
      exit: 'animate__fadeOut'
    }
  },
  AddThemeToDatePickers: function(currentUser) {
    return setTimeout(function() {
      var datetimeParent, ref;
      datetimeParent = document.querySelector('.MuiDialog-root.MuiModal-root');
      if (Manager.IsValid(datetimeParent)) {
        return datetimeParent.classList.add(currentUser != null ? (ref = currentUser.settings) != null ? ref.theme : void 0 : void 0);
      }
    }, 100);
  },
  ToggleAnimation: function(addOrRemove, itemsClass, animateName, delay = 80, slower = false) {
    var AddClasses, allMenuItems;
    allMenuItems = document.querySelectorAll(`.${itemsClass}`);
    AddClasses = function(item) {
      if (addOrRemove === 'add' && Manager.IsValid(item)) {
        item.classList.add(DomManager.AnimateClasses[animateName].enter);
        if (slower) {
          return item.classList.add(DomManager.AnimateClasses.names.slow);
        }
      } else {
        return item.classList.add(DomManager.AnimateClasses[animateName].exit);
      }
    };
    if (Manager.IsValid(allMenuItems)) {
      allMenuItems.forEach(function(item) {
        item.classList.add('animate__animated');
        item.classList.remove(DomManager.AnimateClasses[animateName].exit);
        return item.classList.remove(DomManager.AnimateClasses[animateName].enter);
      });
      return allMenuItems.forEach(function(item, index) {
        if (index === 0) {
          return item.classList.add(DomManager.AnimateClasses[animateName].enter);
        } else {
          return setTimeout(function() {
            return AddClasses(item);
          }, index * delay);
        }
      });
    }
  },
  SetDefaultCheckboxes: async function(checkboxContainerClass, object, propName, isArray = false, values) {
    var box, i, j, len, len1, phone, reminderIsValid, reminderTimes, results, timeframe;
    // Share With
    if (checkboxContainerClass === 'share-with') {
      if (Manager.IsValid(values)) {
        for (i = 0, len = values.length; i < len; i++) {
          phone = values[i];
          document.querySelector(`.${checkboxContainerClass} [data-phone='${phone}'] .box`).classList.add('active');
        }
      }
    }
    // Repeating
    if (checkboxContainerClass === 'repeating') {
      return (await DateManager.GetRepeatingEvents(object));
    }
    // Reminder Times
    if (checkboxContainerClass === 'reminder-times') {
      reminderIsValid = Manager.IsValid(values, true);
      reminderTimes = values;
      if (reminderIsValid) {
        results = [];
        for (j = 0, len1 = reminderTimes.length; j < len1; j++) {
          timeframe = reminderTimes[j];
          box = document.querySelector(`[data-label='${CalMapper.readableReminderBeforeTimeframes(timeframe)}'] .box`);
          if (Manager.IsValid(box)) {
            results.push(box.classList.add('active'));
          } else {
            results.push(void 0);
          }
        }
        return results;
      }
    }
  },
  HandleCheckboxSelection: function(element, onCheck, onCheckRemoval, canSelectAll = false) {
    var checkboxWrappers, checkboxes, clickedEl, i, label, len, thisLabel, wrapper;
    clickedEl = element;
    checkboxes = clickedEl.parentNode;
    checkboxWrappers = checkboxes.querySelectorAll('.checkbox-wrapper');
    label = clickedEl.dataset.label;
    // CHECK
    if (clickedEl.classList.contains('active')) {
      label = clickedEl.dataset.label;
      // UNCHECK OTHERS
      if (!canSelectAll) {
        for (i = 0, len = checkboxWrappers.length; i < len; i++) {
          wrapper = checkboxWrappers[i];
          thisLabel = wrapper.dataset.label;
          if (thisLabel !== label) {
            wrapper.classList.remove('active');
          }
        }
      }
      // CHECK
      if (onCheck != null) {
        return onCheck(label);
      }
    // UNCHECK
    } else if (onCheckRemoval != null) {
      return onCheckRemoval(label);
    }
  },
  HandleShareWithSelection: function(e, currentUser, shareWith, refToUpdate) {
    var clickedEl, key, ref, updated;
    clickedEl = e.currentTarget;
    key = e.currentTarget.dataset['key'];
    updated = DatasetManager.ToggleInArray(refToUpdate != null ? (ref = refToUpdate.current) != null ? ref.shareWith : void 0 : void 0, key);
    DomManager.toggleActive(clickedEl);
    return DatasetManager.GetValidArray(updated);
  },
  BuildCheckboxGroup: function({currentUser, labelType, defaultLabels = [], customLabelArray = [], labelProp, uidProp, predefinedType}) {
    var checkboxGroup, checkboxLabels, i, isActive, j, k, label, len, len1, len2, obj, ref;
    checkboxLabels = [];
    checkboxGroup = [];
    // PREDEFINED TYPES
    if (Manager.IsValid(predefinedType)) {
      if (predefinedType === 'coparents' && Manager.IsValid(currentUser != null ? currentUser.coparents : void 0)) {
        checkboxLabels = DB_UserScoped.getCoparentObjArray(currentUser, currentUser != null ? currentUser.coparents : void 0);
      }
      if (Manager.IsValid(checkboxLabels)) {
        for (i = 0, len = checkboxLabels.length; i < len; i++) {
          label = checkboxLabels[i];
          checkboxGroup.push({
            label: label['name'],
            key: label['key']
          });
        }
        return checkboxGroup;
      }
    }
    // CUSTOM LABELS
    if (!Manager.IsValid(labelProp) && !Manager.IsValid(uidProp)) {
      if (labelType && labelType === 'reminder-times') {
        checkboxLabels = CalMapper.allUnformattedTimes();
      }
      if (labelType && labelType === 'children') {
        checkboxLabels = currentUser != null ? (ref = currentUser.children) != null ? ref.map(function(x) {
          var ref1;
          return x != null ? (ref1 = x.general) != null ? ref1.name : void 0 : void 0;
        }) : void 0 : void 0;
      }
      if (labelType && labelType === 'recurring-intervals') {
        checkboxLabels = ['Daily', 'Weekly', 'Biweekly', 'Monthly'];
      }
      if (labelType && labelType === 'record-types') {
        checkboxLabels = ['Expenses', 'Chats'];
      }
      if (labelType && labelType === 'visitation') {
        checkboxLabels = ['50/50', 'Custom Weekends', 'Every Weekend', 'Every other Weekend'];
      }
      if (labelType && labelType === 'expense-payers' && Manager.IsValid(currentUser.coparents)) {
        checkboxLabels = DatasetManager.GetValidArray([
          ...currentUser.coparents.map(function(x) {
            return x.name('Me');
          })
        ]);
      }
      if (!labelType && Manager.IsValid(customLabelArray)) {
        checkboxLabels = customLabelArray;
      }
    }
    // ITERATE THROUGH LABELS
    if (!Manager.IsValid(labelProp) && !Manager.IsValid(uidProp)) {
      if (Manager.IsValid(checkboxLabels)) {
        for (j = 0, len1 = checkboxLabels.length; j < len1; j++) {
          label = checkboxLabels[j];
          isActive = false;
          if (Manager.IsValid(defaultLabels) && defaultLabels.includes(label)) {
            isActive = true;
          }
          if (labelType && labelType === 'reminder-times') {
            label = CalMapper.readableReminderBeforeTimeframes(label);
          }
          if (Manager.IsValid(label)) {
            checkboxGroup.push({
              label: label,
              key: label != null ? label.replaceAll(' ', '') : void 0,
              isActive: isActive
            });
          }
        }
      }
    } else {
// ITERATE THROUGH OBJECTS
      for (k = 0, len2 = customLabelArray.length; k < len2; k++) {
        obj = customLabelArray[k];
        if (Manager.IsValid(obj[labelProp]) && Manager.IsValid(obj[uidProp])) {
          checkboxGroup.push({
            label: obj[labelProp],
            key: obj[uidProp]
          });
        }
      }
    }
    return DatasetManager.GetValidArray(checkboxGroup);
  },
  setDefaultView: function() {
    var activeModal, allViews;
    activeModal = document.querySelector('#modal-wrapper.active');
    if (activeModal) {
      allViews = activeModal.querySelectorAll('.view');
      if (Manager.IsValid(allViews[0])) {
        allViews[0].click();
        return allViews[0].classList.add('active');
      }
    }
  },
  ScrollToTopOfPage: function() {
    return window.scrollTo(0, 0);
  },
  toggleActive: function(element) {
    return element.classList.toggle("active");
  },
  toggleAnimateClass: function(element) {
    if (element.classList.contains("animate")) {
      return element.classList.remove("animate");
    } else {
      return element.classList.add('animate');
    }
  },
  hasClass: function(element, className) {
    if (!element) {
      return false;
    }
    if (element.classList.contains(className)) {
      return true;
    } else {
      return false;
    }
  },
  setErrorAlertRed: function() {
    var text;
    text = document.getElementById('swal2-html-container');
    if (text) {
      return text.style.color = 'white';
    }
  },
  autoExpandingHeight: function(e) {
    var ref, ref1, textarea;
    textarea = e.target;
    if (Manager.IsValid(textarea)) {
      if (textarea != null) {
        if ((ref = textarea.style) != null) {
          ref.height = '';
        }
      }
      return textarea != null ? (ref1 = textarea.style) != null ? ref1.height = Math.min(textarea != null ? textarea.scrollHeight : void 0, 300) + 'px' : void 0 : void 0;
    }
  },
  unsetHeight: function(e) {
    var element, ref;
    element = e.target;
    if (Manager.IsValid(element)) {
      return element != null ? (ref = element.style) != null ? ref.height = 'unset' : void 0 : void 0;
    }
  },
  isMobile: function() {
    return window.screen.width < 801;
  },
  tapOrClick: function(isUppercase = false) {
    if (!isUppercase) {
      if (DomManager.isMobile()) {
        return "tap";
      }
      return "click";
    } else {
      if (DomManager.isMobile()) {
        return "Tap";
      }
      return "Click";
    }
  },
  debounce: function(callback, delay) {
    var executedFunction, timeout;
    timeout = null;
    executedFunction = function() {
      var later;
      later = function() {
        clearTimeout(timeout);
        return callback();
      };
      clearTimeout(timeout);
      return timeout = setTimeout(later, delay);
    };
    return executedFunction;
  },
  isInViewport: function(el) {
    var rect;
    if (Manager.IsValid(el)) {
      rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    }
  },
  showInputLabels: function(wrapperClass) {
    var i, input, inputs, labelWrapper, len, parent, results;
    inputs = wrapperClass.querySelectorAll('input,textarea');
    results = [];
    for (i = 0, len = inputs.length; i < len; i++) {
      input = inputs[i];
      if (input) {
        if (input.value.length > 0 || (input != null ? input.textContent.length : void 0) > 0) {
          if (!input.classList.contains("react-toggle-screenreader-only")) {
            if (!input.classList.contains("MuiBase-input")) {
              parent = input.parentNode;
              if (parent) {
                parent.classList.add('active');
                labelWrapper = parent.querySelector("#label-wrapper");
                if (labelWrapper) {
                  results.push(labelWrapper.classList.add("active"));
                } else {
                  results.push(void 0);
                }
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  mostIsInViewport: function(scrollWrapper, el) {
    var pxCloseToEl, rect, scrollWrapperHeight;
    if (Manager.IsValid(el)) {
      rect = el.getBoundingClientRect();
      scrollWrapperHeight = scrollWrapper.getBoundingClientRect().height;
      pxCloseToEl = rect.top - scrollWrapperHeight;
      return pxCloseToEl <= -170;
    }
  },
  addScrollListener: function(scrollableElement, callback, delay) {
    return scrollableElement.addEventListener('scroll', DomManager.debounce(function() {
      return callback();
    }, delay));
  },
  getSelectionText: function() {
    var text;
    text = "";
    if (window.getSelection != null) {
      text = window.getSelection().toString();
    } else if ((document.selection != null) && document.selection.type !== "Control") {
      text = document.selection.createRange().text;
    }
    return text;
  },
  clearTextSelection: function() {
    if (window.getSelection) {
      // Chrome
      if (window.getSelection().empty) {
        return window.getSelection().empty();
      } else if (window.getSelection().removeAllRanges) {
        // Firefox
        return window.getSelection().removeAllRanges();
      }
    } else if (document.selection) {
      // IE?
      return document.selection.empty();
    }
  }
};

export default DomManager;

//# sourceMappingURL=domManager.js.map
