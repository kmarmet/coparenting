// Generated by CoffeeScript 2.7.0
var DomManager;

import Manager from "./manager";

DomManager = {
  AnimateClasses: {
    names: {
      fadeInUp: 'fadeInUp',
      fadeInDown: 'fadeInDown',
      fadeInRight: 'fadeInRight',
      slideInLeft: 'slideInLeft',
      slideInRight: 'slideInRight',
      fadeIn: 'fadeIn',
      zoomIn: 'zoomIn'
    },
    zoomIn: {
      enter: 'animate__zoomIn',
      exit: 'animate__zoomOut'
    },
    fadeIn: {
      enter: 'animate__fadeIn',
      exit: 'animate__fadeOut'
    },
    slideInLeft: {
      enter: 'animate__slideInLeft',
      exit: 'animate__slideOutLeft'
    },
    slideInRight: {
      enter: 'animate__slideInRight',
      exit: 'animate__slideOutRight'
    },
    fadeInUp: {
      enter: 'animate__fadeInUp',
      exit: 'animate__fadeOutDown'
    },
    fadeInDown: {
      enter: 'animate__fadeInDown',
      exit: 'animate__fadeOutUp'
    },
    fadeInRight: {
      enter: 'animate__fadeInRight',
      exit: 'animate__fadeOut'
    }
  },
  AddThemeToDatePickers: function(currentUser) {
    return setTimeout(function() {
      var datetimeParent, ref;
      datetimeParent = document.querySelector('.MuiDialog-root.MuiModal-root');
      if (Manager.isValid(datetimeParent)) {
        return datetimeParent.classList.add(currentUser != null ? (ref = currentUser.settings) != null ? ref.theme : void 0 : void 0);
      }
    }, 100);
  },
  ToggleAnimation: function(addOrRemove, itemsClass, animateName, delay = 80) {
    var allMenuItems;
    allMenuItems = document.querySelectorAll(`.${itemsClass}`);
    if (Manager.isValid(allMenuItems)) {
      allMenuItems.forEach(function(item) {
        item.classList.add('animate__animated');
        item.classList.remove(DomManager.AnimateClasses[animateName].exit);
        return item.classList.remove(DomManager.AnimateClasses[animateName].enter);
      });
      return allMenuItems.forEach(function(item, index) {
        return setTimeout(function() {
          if (addOrRemove === 'add') {
            return item.classList.add(DomManager.AnimateClasses[animateName].enter);
          } else {
            return item.classList.add(DomManager.AnimateClasses[animateName].exit);
          }
        }, index * delay);
      });
    }
  },
  setDefaultView: function() {
    var activeModal, allViews, detailsView;
    activeModal = document.querySelector('#modal.active');
    if (activeModal) {
      detailsView = activeModal.querySelector('.view.active');
      if (detailsView) {
        allViews = activeModal.querySelectorAll('.view');
        if (Manager.isValid(allViews)) {
          if (detailsView) {
            detailsView.click();
            return allViews[0].classList.add('active');
          }
        }
      }
    }
  },
  toggleActive: function(element) {
    return element.classList.toggle("active");
  },
  toggleAnimateClass: function(element) {
    if (element.classList.contains("animate")) {
      return element.classList.remove("animate");
    } else {
      return element.classList.add('animate');
    }
  },
  hasClass: function(element, className) {
    if (!element) {
      return false;
    }
    if (element.classList.contains(className)) {
      return true;
    } else {
      return false;
    }
  },
  setErrorAlertRed: function() {
    var text;
    text = document.getElementById('swal2-html-container');
    if (text) {
      return text.style.color = 'white';
    }
  },
  autoExpandingHeight: function(e) {
    var ref, ref1, textarea;
    textarea = e.target;
    if (Manager.isValid(textarea)) {
      if (textarea != null) {
        if ((ref = textarea.style) != null) {
          ref.height = '';
        }
      }
      return textarea != null ? (ref1 = textarea.style) != null ? ref1.height = Math.min(textarea != null ? textarea.scrollHeight : void 0, 300) + 'px' : void 0 : void 0;
    }
  },
  unsetHeight: function(e) {
    var element, ref;
    element = e.target;
    if (Manager.isValid(element)) {
      return element != null ? (ref = element.style) != null ? ref.height = 'unset' : void 0 : void 0;
    }
  },
  isMobile: function() {
    return window.screen.width < 801;
  },
  tapOrClick: function(isUppercase = false) {
    if (!isUppercase) {
      if (DomManager.isMobile()) {
        return "tap";
      }
      return "click";
    } else {
      if (DomManager.isMobile()) {
        return "Tap";
      }
      return "Click";
    }
  },
  debounce: function(callback, delay) {
    var executedFunction, timeout;
    timeout = null;
    executedFunction = function() {
      var later;
      later = function() {
        clearTimeout(timeout);
        return callback();
      };
      clearTimeout(timeout);
      return timeout = setTimeout(later, delay);
    };
    return executedFunction;
  },
  isInViewport: function(el) {
    var rect;
    if (Manager.isValid(el)) {
      rect = el.getBoundingClientRect();
      return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
    }
  },
  showInputLabels: function(wrapperClass) {
    var i, input, inputs, labelWrapper, len, parent, results;
    inputs = wrapperClass.querySelectorAll('input,textarea');
    results = [];
    for (i = 0, len = inputs.length; i < len; i++) {
      input = inputs[i];
      if (input) {
        if (input.value.length > 0 || (input != null ? input.textContent.length : void 0) > 0) {
          if (!input.classList.contains("react-toggle-screenreader-only")) {
            if (!input.classList.contains("MuiBase-input")) {
              parent = input.parentNode;
              if (parent) {
                parent.classList.add('active');
                labelWrapper = parent.querySelector("#label-wrapper");
                if (labelWrapper) {
                  results.push(labelWrapper.classList.add("active"));
                } else {
                  results.push(void 0);
                }
              } else {
                results.push(void 0);
              }
            } else {
              results.push(void 0);
            }
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  },
  mostIsInViewport: function(scrollWrapper, el) {
    var pxCloseToEl, rect, scrollWrapperHeight;
    if (Manager.isValid(el)) {
      rect = el.getBoundingClientRect();
      scrollWrapperHeight = scrollWrapper.getBoundingClientRect().height;
      pxCloseToEl = rect.top - scrollWrapperHeight;
      return pxCloseToEl <= -170;
    }
  },
  addScrollListener: function(scrollableElement, callback, delay) {
    return scrollableElement.addEventListener('scroll', DomManager.debounce(function() {
      return callback();
    }, delay));
  },
  getSelectionText: function() {
    var text;
    text = "";
    if (window.getSelection != null) {
      text = window.getSelection().toString();
    } else if ((document.selection != null) && document.selection.type !== "Control") {
      text = document.selection.createRange().text;
    }
    return text;
  },
  clearTextSelection: function() {
    if (window.getSelection) {
      // Chrome
      if (window.getSelection().empty) {
        return window.getSelection().empty();
      } else if (window.getSelection().removeAllRanges) {
        // Firefox
        return window.getSelection().removeAllRanges();
      }
    } else if (document.selection) {
      // IE?
      return document.selection.empty();
    }
  }
};

export default DomManager;

//# sourceMappingURL=domManager.js.map
