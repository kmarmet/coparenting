// Generated by CoffeeScript 2.7.0
var DomManager

import DB_UserScoped from '../database/db_userScoped'

import CalMapper from '../mappers/calMapper'

import DatasetManager from './datasetManager'

import DateManager from './dateManager'
import Manager from './manager'

DomManager = {
    AnimateDelayStyle: function (index, delay = 0.2) {
        return {
            animationDelay: `${index * delay}s`,
        }
    },
    Animate: {
        RemoveAnimationClasses: function (classOfElementsToAnimate, classToRemove) {
            var element, j, len, results
            if (Manager.IsValid(classOfElementsToAnimate)) {
                classOfElementsToAnimate = document.querySelectorAll(`${classOfElementsToAnimate}`)
                results = []
                for (j = 0, len = classOfElementsToAnimate.length; j < len; j++) {
                    element = classOfElementsToAnimate[j]
                    results.push(element.classList.remove(classToRemove))
                }
                return results
            }
        },
        FadeInRight: function (variableToCheck, fastSlowOrDefault = '') {
            var ref, ref1
            if (typeof variableToCheck === 'boolean') {
                if (variableToCheck === true) {
                    return `animate__animated animate__fadeInRight ${
                        (ref = Manager.IsValid(fastSlowOrDefault, true)) != null
                            ? ref
                            : {
                                  [`animate__${fastSlowOrDefault}`]: '',
                              }
                    }`
                } else {
                    return 'animate__animated animate__fadeOut'
                }
            }
            if (Manager.IsValid(variableToCheck)) {
                return `animate__animated animate__fadeInRight ${
                    (ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null
                        ? ref1
                        : {
                              [`animate__${fastSlowOrDefault}`]: '',
                          }
                }`
            } else {
                return 'animate__animated animate__fadeOut'
            }
        },
        FadeInUp: function (variableToCheck, fastSlowOrDefault = '') {
            var ref, ref1
            if (typeof variableToCheck === 'boolean') {
                if (variableToCheck === true) {
                    return `animate__animated animate__fadeInUp ${
                        (ref = Manager.IsValid(fastSlowOrDefault, true)) != null
                            ? ref
                            : {
                                  [`animate__${fastSlowOrDefault}`]: '',
                              }
                    }`
                } else {
                    return 'animate__animated animate__fadeOutDown'
                }
            }
            if (Manager.IsValid(variableToCheck)) {
                return `animate__animated animate__fadeInUp ${
                    (ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null
                        ? ref1
                        : {
                              [`animate__${fastSlowOrDefault}`]: '',
                          }
                }`
            } else {
                return 'animate__animated animate__fadeOutDown'
            }
        },
        FadeInDown: function (variableToCheck, fastSlowOrDefault = '') {
            var ref
            if (Manager.IsValid(variableToCheck) || variableToCheck === true) {
                return `animate__animated animate__fadeInDown ${
                    (ref = Manager.IsValid(fastSlowOrDefault, true)) != null
                        ? ref
                        : {
                              [`animate__${fastSlowOrDefault}`]: '',
                          }
                }`
            } else {
                return 'animate__animated animate__fadeOutUp'
            }
        },
        ZoomIn: function (variableToCheck, fastSlowOrDefault = '') {
            var ref, ref1
            if (typeof variableToCheck === 'boolean') {
                if (variableToCheck === true) {
                    return `animate__animated animate__zoomIn ${
                        (ref = Manager.IsValid(fastSlowOrDefault, true)) != null
                            ? ref
                            : {
                                  [`animate__${fastSlowOrDefault}`]: '',
                              }
                    }`
                } else {
                    return 'animate__animated animate__zoomOut'
                }
            }
            if (Manager.IsValid(variableToCheck)) {
                return `animate__animated animate__zoomIn ${
                    (ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null
                        ? ref1
                        : {
                              [`animate__${fastSlowOrDefault}`]: '',
                          }
                }`
            } else {
                return 'animate__animated animate__zoomOut'
            }
        },
        ZoomInDown: function (variableToCheck, fastSlowOrDefault = '') {
            var ref, ref1
            if (typeof variableToCheck === 'boolean') {
                if (variableToCheck === true) {
                    return `animate__animated animate__zoomInDown ${
                        (ref = Manager.IsValid(fastSlowOrDefault, true)) != null
                            ? ref
                            : {
                                  [`animate__${fastSlowOrDefault}`]: '',
                              }
                    }`
                } else {
                    return 'animate__animated animate__zoomOutDown'
                }
            }
            if (Manager.IsValid(variableToCheck)) {
                return `animate__animated animate__zoomInDown ${
                    (ref1 = Manager.IsValid(fastSlowOrDefault, true)) != null
                        ? ref1
                        : {
                              [`animate__${fastSlowOrDefault}`]: '',
                          }
                }`
            } else {
                return 'animate__animated animate__zoomOutDown'
            }
        },
        FadeIn: function (variableToCheck, fastSlowOrDefault = '') {
            if (Manager.IsValid(variableToCheck)) {
                return `animate__animated animate__fadeIn animate__${fastSlowOrDefault}`
            } else {
                return 'animate__animated animate__fadeOut'
            }
        },
        AnimateDelayStyle: function (index, delay = 0.2) {
            return {
                animationDelay: `${index * delay}s`,
            }
        },
    },
    AnimateClasses: {
        names: {
            fadeInUp: 'fadeInUp',
            fadeInDown: 'fadeInDown',
            fadeInRight: 'fadeInRight',
            slideInLeft: 'slideInLeft',
            slideInRight: 'slideInRight',
            fadeIn: 'fadeIn',
            zoomIn: 'zoomIn',
            default: 'animate__animated',
            slow: 'animate__slow',
            faster: 'animate__faster',
            slower: 'animate__slower',
            zoomInDown: 'zoomInDown',
        },
        zoomIn: {
            enter: 'animate__zoomIn',
            exit: 'animate__zoomOut',
        },
        zoomInDown: {
            enter: 'animate__zoomInDown',
            exit: 'animate__zoomOutDown',
        },
        fadeIn: {
            enter: 'animate__fadeIn',
            exit: 'animate__fadeOut',
        },
        slideInLeft: {
            enter: 'animate__slideInLeft',
            exit: 'animate__slideOutLeft',
        },
        slideInRight: {
            enter: 'animate__slideInRight',
            exit: 'animate__slideOutRight',
        },
        fadeInUp: {
            enter: 'animate__fadeInUp',
            exit: 'animate__fadeOutDown',
        },
        fadeInDown: {
            enter: 'animate__fadeInDown',
            exit: 'animate__fadeOutUp',
        },
        fadeInRight: {
            enter: 'animate__fadeInRight',
            exit: 'animate__fadeOut',
        },
    },
    AddThemeToDatePickers: function (currentUser) {
        return setTimeout(function () {
            var datetimeParent, ref
            datetimeParent = document.querySelector('.MuiDialog-root.MuiModal-root')
            if (Manager.IsValid(datetimeParent)) {
                return datetimeParent.classList.add(currentUser != null ? ((ref = currentUser.settings) != null ? ref.theme : void 0) : void 0)
            }
        }, 100)
    },
    ToggleAnimation: function (addOrRemove, itemsClass, animateName, delay = 80, slower = false) {
        var AddClasses, allMenuItems
        allMenuItems = document.querySelectorAll(`.${itemsClass}`)
        AddClasses = function (item) {
            if (addOrRemove === 'add' && Manager.IsValid(item)) {
                item.classList.add(DomManager.AnimateClasses[animateName].enter)
                if (slower) {
                    return item.classList.add(DomManager.AnimateClasses.names.slow)
                }
            } else {
                return item.classList.add(DomManager.AnimateClasses[animateName].exit)
            }
        }
        if (Manager.IsValid(allMenuItems)) {
            allMenuItems.forEach(function (item) {
                item.classList.add('animate__animated')
                item.classList.remove(DomManager.AnimateClasses[animateName].exit)
                return item.classList.remove(DomManager.AnimateClasses[animateName].enter)
            })
            return allMenuItems.forEach(function (item, index) {
                return setTimeout(function () {
                    return AddClasses(item)
                }, index * delay)
            })
        }
    },
    ToggleDisableScrollClass: function (addOrRemove) {
        var appContentWithSidebar, pageContainer, ref, ref1
        appContentWithSidebar = document.querySelector('#app-content-with-sidebar')
        pageContainer = document.querySelector('.page-container')
        if (pageContainer && addOrRemove === 'add') {
            pageContainer.classList.add('disable-scroll')
            document.body.classList.add('disable-scroll')
            return appContentWithSidebar != null ? ((ref = appContentWithSidebar.classList) != null ? ref.add('disable-scroll') : void 0) : void 0
        } else {
            if (pageContainer) {
                pageContainer.classList.remove('disable-scroll')
            }
            document.body.classList.remove('disable-scroll')
            return appContentWithSidebar != null
                ? (ref1 = appContentWithSidebar.classList) != null
                    ? ref1.remove('disable-scroll')
                    : void 0
                : void 0
        }
    },
    SetDefaultCheckboxes: async function (checkboxContainerClass, object, propName, isArray = false, values) {
        var box, j, k, len, len1, phone, reminderIsValid, reminderTimes, results, timeframe
        if (checkboxContainerClass === 'share-with') {
            if (Manager.IsValid(values)) {
                for (j = 0, len = values.length; j < len; j++) {
                    phone = values[j]
                    document.querySelector(`.${checkboxContainerClass} [data-phone='${phone}'] .box`).classList.add('active')
                }
            }
        }
        // Repeating
        if (checkboxContainerClass === 'repeating') {
            return await DateManager.GetRepeatingEvents(object)
        }
        // Reminder Times
        if (checkboxContainerClass === 'reminder-times') {
            reminderIsValid = Manager.IsValid(values, true)
            reminderTimes = values
            if (reminderIsValid) {
                results = []
                for (k = 0, len1 = reminderTimes.length; k < len1; k++) {
                    timeframe = reminderTimes[k]
                    box = document.querySelector(`[data-label='${CalMapper.GetReadableReminderTime(timeframe)}'] .box`)
                    if (Manager.IsValid(box)) {
                        results.push(box.classList.add('active'))
                    } else {
                        results.push(void 0)
                    }
                }
                return results
            }
        }
    },
    AddActiveClassWithDelay: function (elements, delay = 0.2) {
        if (Manager.IsValid(elements)) {
            return elements.forEach(function (el, i) {
                // delay per element
                return setTimeout(function () {
                    return el.classList.add('active')
                }, i * delay)
            })
        }
    },
    CheckIfElementIsTag: function (element, tag) {
        return element.target.tagName === tag
    },
    HandleCheckboxSelection: function (element, onCheck, onCheckRemoval, canSelectAll = false) {
        var checkboxWrappers, checkboxes, checkmark, clickedEl, j, label, len, thisLabel, wrapper
        clickedEl = element
        checkboxes = clickedEl.parentNode
        checkboxWrappers = checkboxes.querySelectorAll('.checkbox-wrapper')
        label = clickedEl.dataset.label
        // CHECK
        if (clickedEl.classList.contains('active')) {
            label = clickedEl.dataset.label
            // UNCHECK OTHERS
            if (!canSelectAll) {
                if (Manager.IsValid(checkboxWrappers)) {
                    for (j = 0, len = checkboxWrappers.length; j < len; j++) {
                        wrapper = checkboxWrappers[j]
                        thisLabel = wrapper.dataset.label
                        checkmark = wrapper.querySelector('.checkmark')
                        if (Manager.IsValid(checkmark)) {
                            checkmark.classList.remove('active')
                        }
                        if (thisLabel !== label) {
                            wrapper.classList.remove('active')
                        }
                    }
                }
            }
            // CHECK
            if (onCheck != null) {
                return onCheck(label)
            }
            // UNCHECK
        } else if (onCheckRemoval != null) {
            return onCheckRemoval(label)
        }
    },
    HandleShareWithSelection: function (e, currentUser, shareWith, refToUpdate) {
        var clickedEl, key, ref, updated
        clickedEl = e.currentTarget
        key = e.currentTarget.dataset['key']
        updated = DatasetManager.ToggleInArray(refToUpdate != null ? ((ref = refToUpdate.current) != null ? ref.shareWith : void 0) : void 0, key)
        DomManager.ToggleActive(clickedEl)
        return DatasetManager.GetValidArray(updated)
    },
    GetRandomHexColor: function () {
        return (
            '#' +
            Math.floor(Math.random() * 0xffffff)
                .toString(16)
                .padStart(6, '0')
        )
    },
    BuildCheckboxGroup: function ({currentUser, labelType, defaultLabels = [], customLabelArray = [], labelProp, uidProp, predefinedType}) {
        var checkboxGroup, checkboxLabels, isActive, j, k, l, label, len, len1, len2, obj, ref
        checkboxLabels = []
        checkboxGroup = []
        // PREDEFINED TYPES
        if (Manager.IsValid(predefinedType)) {
            if (predefinedType === 'coparents' && Manager.IsValid(currentUser != null ? currentUser.coparents : void 0)) {
                checkboxLabels = DB_UserScoped.getCoparentObjArray(currentUser, currentUser != null ? currentUser.coparents : void 0)
            }
            if (Manager.IsValid(checkboxLabels)) {
                for (j = 0, len = checkboxLabels.length; j < len; j++) {
                    label = checkboxLabels[j]
                    checkboxGroup.push({
                        label: label['name'],
                        key: label['key'],
                    })
                }
                return checkboxGroup
            }
        }
        // CUSTOM LABELS
        if (!Manager.IsValid(labelProp) && !Manager.IsValid(uidProp)) {
            if (labelType && labelType === 'reminder-times') {
                checkboxLabels = CalMapper.allUnformattedTimes()
            }
            if (labelType && labelType === 'children') {
                checkboxLabels =
                    currentUser != null
                        ? (ref = currentUser.children) != null
                            ? ref.map(function (x) {
                                  var ref1
                                  return x != null ? ((ref1 = x.general) != null ? ref1.name : void 0) : void 0
                              })
                            : void 0
                        : void 0
            }
            if (labelType && labelType === 'recurring-intervals') {
                checkboxLabels = ['Daily', 'Weekly', 'Biweekly', 'Monthly']
            }
            if (labelType && labelType === 'record-types') {
                checkboxLabels = ['Expenses', 'Chats']
            }
            if (labelType && labelType === 'visitation') {
                checkboxLabels = ['50/50', 'Custom Weekends', 'Every Weekend', 'Every other Weekend']
            }
            if (labelType && labelType === 'expense-payers' && Manager.IsValid(currentUser.coparents)) {
                checkboxLabels = DatasetManager.GetValidArray([
                    ...currentUser.coparents.map(function (x) {
                        return x.name('Me')
                    }),
                ])
            }
            if (!labelType && Manager.IsValid(customLabelArray)) {
                checkboxLabels = customLabelArray
            }
        }
        // ITERATE THROUGH LABELS
        if (!Manager.IsValid(labelProp) && !Manager.IsValid(uidProp)) {
            if (Manager.IsValid(checkboxLabels)) {
                for (k = 0, len1 = checkboxLabels.length; k < len1; k++) {
                    label = checkboxLabels[k]
                    isActive = false
                    if (Manager.IsValid(defaultLabels) && defaultLabels.includes(label)) {
                        isActive = true
                    }
                    if (labelType && labelType === 'reminder-times') {
                        label = CalMapper.GetReadableReminderTime(label)
                    }
                    if (Manager.IsValid(label)) {
                        checkboxGroup.push({
                            label: label,
                            key: label != null ? label.replaceAll(' ', '') : void 0,
                            isActive: isActive,
                        })
                    }
                }
            }
        } else {
            // ITERATE THROUGH OBJECTS
            for (l = 0, len2 = customLabelArray.length; l < len2; l++) {
                obj = customLabelArray[l]
                if (Manager.IsValid(obj[labelProp]) && Manager.IsValid(obj[uidProp])) {
                    checkboxGroup.push({
                        isActive: Manager.IsValid(defaultLabels),
                        label: obj[labelProp],
                        key: obj[uidProp],
                    })
                }
            }
        }
        return DatasetManager.GetValidArray(checkboxGroup)
    },
    setDefaultView: function () {
        var activeModal, allViews
        activeModal = document.querySelector('.form-wrapper.active')
        if (activeModal) {
            allViews = activeModal.querySelectorAll('.view')
            if (Manager.IsValid(allViews[0])) {
                allViews[0].click()
                return allViews[0].classList.add('active')
            }
        }
    },
    ScrollToTopOfPage: function () {
        return window.scrollTo(0, 0)
    },
    ToggleActive: function (element, iterationClass = [], removeActiveFromAllFirst = false) {
        if (removeActiveFromAllFirst && Manager.IsValid(iterationClass, true)) {
            document.querySelectorAll(iterationClass).forEach(function (x) {
                return x != null ? x.classList.remove('active') : void 0
            })
        }
        return element.classList.toggle('active')
    },
    toggleAnimateClass: function (element) {
        if (element.classList.contains('animate')) {
            return element.classList.remove('animate')
        } else {
            return element.classList.add('animate')
        }
    },
    hasClass: function (element, className) {
        if (!element) {
            return false
        }
        if (element.classList.contains(className)) {
            return true
        } else {
            return false
        }
    },
    setErrorAlertRed: function () {
        var text
        text = document.getElementById('swal2-html-container')
        if (text) {
            return (text.style.color = 'white')
        }
    },
    autoExpandingHeight: function (e) {
        var ref, ref1, textarea
        textarea = e.target
        if (Manager.IsValid(textarea)) {
            if (textarea != null) {
                if ((ref = textarea.style) != null) {
                    ref.height = ''
                }
            }
            return textarea != null
                ? (ref1 = textarea.style) != null
                    ? (ref1.height = Math.min(textarea != null ? textarea.scrollHeight : void 0, 300) + 'px')
                    : void 0
                : void 0
        }
    },
    unsetHeight: function (e) {
        var element, ref
        element = e.target
        if (Manager.IsValid(element)) {
            return element != null ? ((ref = element.style) != null ? (ref.height = 'unset') : void 0) : void 0
        }
    },
    isMobile: function () {
        return window.screen.width < 801
    },
    tapOrClick: function (isUppercase = false) {
        if (!isUppercase) {
            if (DomManager.isMobile()) {
                return 'tap'
            }
            return 'click'
        } else {
            if (DomManager.isMobile()) {
                return 'Tap'
            }
            return 'Click'
        }
    },
    debounce: function (callback, delay) {
        var executedFunction, timeout
        timeout = null
        executedFunction = function () {
            var later
            later = function () {
                clearTimeout(timeout)
                return callback()
            }
            clearTimeout(timeout)
            return (timeout = setTimeout(later, delay))
        }
        return executedFunction
    },
    isInViewport: function (el) {
        var rect
        if (Manager.IsValid(el)) {
            rect = el.getBoundingClientRect()
            return (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
                rect.right <= (window.innerWidth || document.documentElement.clientWidth)
            )
        }
    },
    MostIsInViewport: function (scrollWrapper, el) {
        var pxCloseToEl, rect, scrollWrapperHeight
        if (Manager.IsValid(el)) {
            rect = el.getBoundingClientRect()
            scrollWrapperHeight = scrollWrapper.getBoundingClientRect().height
            pxCloseToEl = rect.top - scrollWrapperHeight
            console.log(true)
            return pxCloseToEl <= -170
        }
    },
    AddScrollListener: function (scrollableElement, callback, delay) {
        console.log(scrollableElement)
        return scrollableElement.addEventListener(
            'scroll',
            DomManager.debounce(function () {
                return callback()
            }, delay)
        )
    },
    GetSelectionText: function () {
        var string, text
        ;({
            text: (string = ''),
        })
        if (window.getSelection != null) {
            text = window.getSelection().toString()
        }
        return text
    },
    ClearTextSelection: function () {
        if (window.getSelection) {
            if (window.getSelection().empty) {
                return window.getSelection()
            } else if (window.getSelection().removeAllRanges) {
                return window.getSelection().removeAllRanges()
            }
        } else if (window.getSelection.toString()) {
            return window.getSelection.toString().empty()
        }
    },
}

export default DomManager

//# sourceMappingURL=domManager.js.map