{
  "version": 3,
  "file": "calMapper.js",
  "sourceRoot": "\\",
  "sources": [
    "calMapper.coffee"
  ],
  "names": [],
  "mappings": ";AAAA,IAAA;;AAAA,OAAO,aAAP,MAAA;;AACA,OAAO,WAAP,MAAA;;AACA,OAAO,MAAP,MAAA;;AACA,OAAO,OAAP,MAAA;;AAEA,cAAA,GACE;EAAA,gBAAA,EAAkB,QAAA,CAAC,SAAD,CAAA;IAChB,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,CAAH;AACE,aAAO,aAAa,CAAC,KADvB;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,IAA3B,CAAH;AACE,aAAO,aAAa,CAAC,SADvB;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,GAA3B,CAAH;AACE,aAAO,aAAa,CAAC,YADvB;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,OAA3B,CAAH;AACE,aAAO,aAAa,CAAC,YADvB;;EAPgB,CAAlB;EAUA,wBAAA,EAA0B,QAAA,CAAA,CAAA;AAC5B,QAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,GAAA,EAAA;IAAI,aAAA,GAAgB;AAChB;IAAA,KAAA,qCAAA;;MACE,aAAa,CAAC,IAAd,CAAmB,cAAc,CAAC,uBAAf,CAAuC,IAAvC,CAAnB;IADF;AAEA,WAAO;EAJiB,CAV1B;EAgBA,mBAAA,EAAqB,QAAA,CAAA,CAAA;AACvB,QAAA;IAAI,GAAA,GAAM,CAAC,aAAD,EAAe,aAAf,EAA6B,UAA7B,EAAwC,MAAxC;AACN,WAAO;EAFY,CAhBrB;EAoBA,uBAAA,EAAyB,QAAA,CAAC,SAAD,CAAA;IACvB,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,gBADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,oBADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,mBADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,gBADV;;EAPuB,CApBzB;EA8BA,gCAAA,EAAkC,QAAA,CAAC,SAAD,CAAA;IAChC,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,SADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,aADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,YADV;;IAEA,IAAG,OAAO,CAAC,QAAR,CAAiB,SAAjB,EAA2B,MAA3B,EAAmC,KAAnC,CAAH;AACE,aAAQ,gBADV;;EAPgC,CA9BlC;EAwCA,uBAAA,EAAyB,QAAA,CAAC,gBAAD,CAAA;AAC3B,QAAA;IAAI,QAAA,GAAW;IACX,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,MAAzB,CAAA,GAAmC,CAAC,CAAvC;MACE,QAAA,GAAW,gBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,UAAzB,CAAA,GAAuC,CAAC,CAA3C;MACE,QAAA,GAAW,oBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,aAAzB,CAAA,GAA0C,CAAC,CAA9C;MACE,QAAA,GAAW,mBADb;;IAEA,IAAG,gBAAgB,CAAC,OAAjB,CAAyB,aAAzB,CAAA,GAA0C,CAAC,CAA9C;MACE,QAAA,GAAW,mBADb;;AAGA,WAAO;EAXgB,CAxCzB;EAqDA,eAAA,EAAiB,QAAA,CAAC,iBAAD,EAAoB,cAApB,EAAoC,gBAApC,CAAA;AACnB,QAAA;IAAI,aAAA,GAAgB;IAChB,IAAG,iBAAA,KAAqB,OAAxB;MACE,aAAA,GAAgB,WAAW,CAAC,aAAZ,CAA0B,cAA1B,EAA0C,gBAA1C,EADlB;;IAEA,IAAG,iBAAA,KAAqB,QAAxB;MACE,aAAA,GAAgB,WAAW,CAAC,cAAZ,CAA2B,cAA3B,EAA2C,gBAA3C,EADlB;;IAEA,IAAG,iBAAA,KAAqB,UAAxB;MACE,aAAA,GAAgB,WAAW,CAAC,gBAAZ,CAA6B,cAA7B,EAA6C,gBAA7C,EADlB;;IAEA,IAAG,iBAAA,KAAqB,SAAxB;MACE,aAAA,GAAgB,WAAW,CAAC,eAAZ,CAA4B,cAA5B,EAA4C,gBAA5C,EADlB;;AAEA,WAAO;EAVQ,CArDjB;EAiEA,iBAAA,EAAmB,QAAA,CAAC,IAAD,CAAA;AACjB,YAAO,IAAP;AAAA,WACO,IAAA,KAAQ,gBADf;eAEI;AAFJ,WAGO,IAAA,KAAQ,wBAHf;eAII;AAJJ,WAKO,IAAA,KAAQ,aALf;eAMI;AANJ,WAOO,IAAA,KAAQ,QAPf;eAQI;AARJ,WASO,IAAA,KAAQ,YATf;eAUI;AAVJ,WAWO,IAAA,KAAQ,cAXf;eAYI;AAZJ,WAaO,IAAA,KAAQ,cAbf;eAcI;AAdJ,WAeO,IAAA,KAAQ,cAff;eAgBI;AAhBJ,WAiBO,IAAA,KAAQ,kBAjBf;eAkBI;AAlBJ,WAmBO,IAAA,KAAQ,WAnBf;eAoBI;AApBJ,WAqBO,IAAA,KAAQ,cArBf;eAsBI;AAtBJ,WAuBO,IAAA,KAAQ,WAvBf;eAwBI;AAxBJ,WAyBO,IAAA,KAAQ,eAzBf;eA0BI;AA1BJ,WA2BO,IAAA,KAAQ,eA3Bf;eA4BI;AA5BJ,WA6BO,IAAA,KAAQ,gBA7Bf;eA8BI;AA9BJ,WA+BO,IAAA,KAAQ,eA/Bf;eAgCI;AAhCJ,WAiCO,IAAA,KAAQ,kBAjCf;eAkCI;AAlCJ;eAoCI;AApCJ;EADiB,CAjEnB;EAuGA,iBAAA,EAAmB,QAAA,CAAC,IAAD,CAAA;IACjB,IAAA,GAAO,MAAA,CAAO,IAAP,CAAY,CAAC,MAAb,CAAoB,OAApB;AACP,YAAO,IAAP;AAAA,WACO,IAAA,KAAQ,OADf;AAEI,eAAO;AAFX,WAGO,IAAA,KAAQ,OAHf;AAII,eAAO;AAJX,WAKO,IAAA,KAAQ,OALf;AAMI,eAAO;AANX,WAOO,IAAA,KAAQ,OAPf;AAQI,eAAO;AARX,WASO,IAAA,KAAQ,OATf;AAUI,eAAO;AAVX,WAWO,IAAA,KAAQ,OAXf;AAYI,eAAO;AAZX,WAaO,IAAA,KAAQ,OAbf;AAcI,eAAO;AAdX,WAeO,IAAA,KAAQ,OAff;AAgBI,eAAO;AAhBX,WAiBO,IAAA,KAAQ,OAjBf;AAkBI,eAAO;AAlBX,WAmBO,IAAA,KAAQ,OAnBf;AAoBI,eAAO;AApBX,WAqBO,IAAA,KAAQ,OArBf;AAsBI,eAAO;AAtBX,WAuBO,IAAA,KAAQ,OAvBf;AAwBI,eAAO;AAxBX,WAyBO,IAAA,KAAQ,OAzBf;AA0BI,eAAO;AA1BX,WA2BO,IAAA,KAAQ,OA3Bf;AA4BI,eAAO;AA5BX,WA6BO,IAAA,KAAQ,OA7Bf;AA8BI,eAAO;AA9BX,WA+BO,IAAA,KAAQ,OA/Bf;AAgCI,eAAO;AAhCX,WAiCO,IAAA,KAAQ,OAjCf;AAkCI,eAAO;AAlCX;eAoCI;AApCJ;EAFiB,CAvGnB;EA+IA,gBAAA,EAAkB,QAAA,CAAC,aAAD,CAAA;AACpB,QAAA,OAAA,EAAA,WAAA,EAAA,WAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAI,gBAAA,GAAmB;IACnB,KAAA,+CAAA;;MACE,GAAA,GACE;QAAA,IAAA,EAAM,EAAN;QACA,IAAA,EAAM;MADN;MAEF,WAAA,GAAc,cAAc,CAAC,iBAAf,CAAiC,OAAO,CAAC,SAAzC;MACd,WAAA,GAAc,OAAO,CAAC;MACtB,GAAG,CAAC,IAAJ,GAAW;MACX,GAAG,CAAC,IAAJ,GAAW;MACX,gBAAgB,CAAC,IAAjB,CAAsB,GAAtB;IARF;AASA,WAAO;EAXS;AA/IlB;;AA6JF,OAAA,QAAe",
  "sourcesContent": [
    "import ReminderTimes from '../constants/reminderTimes'\r\nimport DateManager from '../managers/dateManager'\r\nimport moment from \"moment\"\r\nimport Manager from \"../managers/manager\"\r\n\r\nCalendarMapper =\r\n  GetReminderTimes: (timeframe) ->\r\n    if Manager.Contains(timeframe,'hour')\r\n      return ReminderTimes.hour\r\n    if Manager.Contains(timeframe,'30')\r\n      return ReminderTimes.halfHour\r\n    if Manager.Contains(timeframe,'5')\r\n      return ReminderTimes.fiveMinutes\r\n    if Manager.Contains(timeframe,'event')\r\n      return ReminderTimes.timeOfEvent\r\n\r\n  GetReadableReminderTimes: () ->\r\n    readableTimes = []\r\n    for time in Object.keys(ReminderTimes)\r\n      readableTimes.push(CalendarMapper.GetReadableReminderTime(time))\r\n    return readableTimes\r\n\r\n  allUnformattedTimes: () ->\r\n    all = [\"timeOfEvent\",\"fiveMinutes\",\"halfHour\",\"hour\"]\r\n    return all\r\n\r\n  GetReadableReminderTime: (timeframe) ->\r\n    if Manager.Contains(timeframe,'hour', false)\r\n      return  '1 Hour Before'\r\n    if Manager.Contains(timeframe,'half', false)\r\n      return  '30 Minutes Before'\r\n    if Manager.Contains(timeframe,'five', false)\r\n      return  '5 Minutes Before'\r\n    if Manager.Contains(timeframe,'time', false)\r\n      return  'At Event Time'\r\n\r\n  GetShortenedReadableReminderTime: (timeframe) ->\r\n    if Manager.Contains(timeframe,'hour', false)\r\n      return  '1 Hour'\r\n    if Manager.Contains(timeframe,'half', false)\r\n      return  '30 Minutes'\r\n    if Manager.Contains(timeframe,'five', false)\r\n      return  '5 Minutes'\r\n    if Manager.Contains(timeframe,'time', false)\r\n      return  'Time of Event'\r\n\r\n  readableRepeatIntervals: (selectedInterval) ->\r\n    interval = null\r\n    if selectedInterval.indexOf('hour') > -1\r\n      interval = '1 hour before'\r\n    if selectedInterval.indexOf('halfHour') > -1\r\n      interval = '30 minutes before'\r\n    if selectedInterval.indexOf('fiveMinutes') > -1\r\n      interval = '5 minutes before'\r\n    if selectedInterval.indexOf('timeOfEvent') > -1\r\n      interval = 'At time of event'\r\n\r\n    return interval\r\n\r\n  recurringEvents: (recurringInterval, eventStartDate, recurringEndDate) ->\r\n    datesToRepeat = null\r\n    if recurringInterval is 'daily'\r\n      datesToRepeat = DateManager.getDailyDates(eventStartDate, recurringEndDate)\r\n    if recurringInterval is 'weekly'\r\n      datesToRepeat = DateManager.getWeeklyDates(eventStartDate, recurringEndDate)\r\n    if recurringInterval is 'biweekly'\r\n      datesToRepeat = DateManager.getBiweeklyDates(eventStartDate, recurringEndDate)\r\n    if recurringInterval is 'monthly'\r\n      datesToRepeat = DateManager.getMonthlyDates(eventStartDate, recurringEndDate)\r\n    return datesToRepeat\r\n\r\n  holidayNameToDate: (name) ->\r\n    switch true\r\n      when name == \"New Year's Day\"\r\n        '01/01'\r\n      when name == \"Martin Luther King Day\"\r\n        '01/15'\r\n      when name == \"Good Friday\"\r\n        '05/29'\r\n      when name == 'Easter'\r\n        '04/20'\r\n      when name == 'Juneteenth'\r\n        '06/19'\r\n      when name == \"Father's Day\"\r\n        '06/15'\r\n      when name == \"Mother's Day\"\r\n        '05/11'\r\n      when name == 'Memorial Day'\r\n        '05/27'\r\n      when name == 'Independence Day'\r\n        '07/04'\r\n      when name == 'Labor Day'\r\n        '09/02'\r\n      when name == 'Columbus Day'\r\n        '10/14'\r\n      when name == 'Halloween'\r\n        '10/31'\r\n      when name == 'Christmas Day'\r\n        '12/25'\r\n      when name == 'Christmas Eve'\r\n        '12/24'\r\n      when name == \"New Year's Eve\"\r\n        '12/31'\r\n      when name == \"Veteran's Day\"\r\n        '11/11'\r\n      when name == \"Thanksgiving Day\"\r\n        '11/28'\r\n      else\r\n        null\r\n  holidayDateToName: (date) ->\r\n    date = moment(date).format(\"MM/DD\")\r\n    switch true\r\n      when date == '01/01'\r\n        return \"New Year's Day\"\r\n      when date == '01/15'\r\n        return \"Martin Luther King Day\"\r\n      when date == '05/29'\r\n        return \"Good Friday\"\r\n      when date == '04/20'\r\n        return 'Easter'\r\n      when date == '06/19'\r\n        return 'Juneteenth'\r\n      when date == '06/15'\r\n        return \"Father's Day\"\r\n      when date == '05/11'\r\n        return \"Mother's Day\"\r\n      when date == '05/27'\r\n        return 'Memorial Day'\r\n      when date == '07/04'\r\n        return 'Independence Day'\r\n      when date == '09/02'\r\n        return 'Labor Day'\r\n      when date == '10/14'\r\n        return 'Columbus Day'\r\n      when date == '10/31'\r\n        return 'Halloween'\r\n      when date == '12/25'\r\n        return 'Christmas Day'\r\n      when date == '12/24'\r\n        return 'Christmas Eve'\r\n      when date == '12/31'\r\n        return \"New Year's Eve\"\r\n      when date == '11/11'\r\n        return \"Veteran's Day\"\r\n      when date == '11/28'\r\n        return \"Thanksgiving Day\"\r\n      else\r\n        ''\r\n\r\n  eventsToHolidays: (holidayEvents) ->\r\n    userHolidaysList = []\r\n    for holiday in holidayEvents\r\n      obj =\r\n        name: ''\r\n        date: ''\r\n      holidayName = CalendarMapper.holidayDateToName(holiday.startDate)\r\n      holidayDate = holiday.startDate\r\n      obj.name = holidayName\r\n      obj.date = holidayDate\r\n      userHolidaysList.push(obj)\r\n    return userHolidaysList\r\n\r\n\r\nexport default CalendarMapper"
  ]
}