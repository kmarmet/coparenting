// Generated by CoffeeScript 2.7.0
var CalendarMapper;

import ReminderTimes from '../constants/reminderTimes';

import DateManager from '../managers/dateManager';

import moment from "moment";

import Manager from "../managers/manager";

CalendarMapper = {
  GetReminderTimes: function(timeframe) {
    if (Manager.Contains(timeframe, 'hour')) {
      return ReminderTimes.hour;
    }
    if (Manager.Contains(timeframe, '30')) {
      return ReminderTimes.halfHour;
    }
    if (Manager.Contains(timeframe, '5')) {
      return ReminderTimes.fiveMinutes;
    }
    if (Manager.Contains(timeframe, 'event')) {
      return ReminderTimes.timeOfEvent;
    }
  },
  GetReadableReminderTimes: function() {
    var i, len, readableTimes, ref, time;
    readableTimes = [];
    ref = Object.keys(ReminderTimes);
    for (i = 0, len = ref.length; i < len; i++) {
      time = ref[i];
      readableTimes.push(CalendarMapper.GetReadableReminderTime(time));
    }
    return readableTimes;
  },
  allUnformattedTimes: function() {
    var all;
    all = ["timeOfEvent", "fiveMinutes", "halfHour", "hour"];
    return all;
  },
  GetReadableReminderTime: function(timeframe) {
    if (Manager.Contains(timeframe, 'hour', false)) {
      return '1 Hour Before';
    }
    if (Manager.Contains(timeframe, 'half', false)) {
      return '30 Minutes Before';
    }
    if (Manager.Contains(timeframe, 'five', false)) {
      return '5 Minutes Before';
    }
    if (Manager.Contains(timeframe, 'time', false)) {
      return 'At Event Time';
    }
  },
  GetShortenedReadableReminderTime: function(timeframe) {
    if (Manager.Contains(timeframe, 'hour', false)) {
      return '1 Hour';
    }
    if (Manager.Contains(timeframe, 'half', false)) {
      return '30 Minutes';
    }
    if (Manager.Contains(timeframe, 'five', false)) {
      return '5 Minutes';
    }
    if (Manager.Contains(timeframe, 'time', false)) {
      return 'Time of Event';
    }
  },
  readableRepeatIntervals: function(selectedInterval) {
    var interval;
    interval = null;
    if (selectedInterval.indexOf('hour') > -1) {
      interval = '1 hour before';
    }
    if (selectedInterval.indexOf('halfHour') > -1) {
      interval = '30 minutes before';
    }
    if (selectedInterval.indexOf('fiveMinutes') > -1) {
      interval = '5 minutes before';
    }
    if (selectedInterval.indexOf('timeOfEvent') > -1) {
      interval = 'At time of event';
    }
    return interval;
  },
  recurringEvents: function(recurringInterval, eventStartDate, recurringEndDate) {
    var datesToRepeat;
    datesToRepeat = null;
    if (recurringInterval === 'daily') {
      datesToRepeat = DateManager.getDailyDates(eventStartDate, recurringEndDate);
    }
    if (recurringInterval === 'weekly') {
      datesToRepeat = DateManager.getWeeklyDates(eventStartDate, recurringEndDate);
    }
    if (recurringInterval === 'biweekly') {
      datesToRepeat = DateManager.getBiweeklyDates(eventStartDate, recurringEndDate);
    }
    if (recurringInterval === 'monthly') {
      datesToRepeat = DateManager.getMonthlyDates(eventStartDate, recurringEndDate);
    }
    return datesToRepeat;
  },
  holidayNameToDate: function(name) {
    switch (true) {
      case name === "New Year's Day":
        return '01/01';
      case name === "Martin Luther King Day":
        return '01/15';
      case name === "Good Friday":
        return '05/29';
      case name === 'Easter':
        return '04/20';
      case name === 'Juneteenth':
        return '06/19';
      case name === "Father's Day":
        return '06/15';
      case name === "Mother's Day":
        return '05/11';
      case name === 'Memorial Day':
        return '05/27';
      case name === 'Independence Day':
        return '07/04';
      case name === 'Labor Day':
        return '09/02';
      case name === 'Columbus Day':
        return '10/14';
      case name === 'Halloween':
        return '10/31';
      case name === 'Christmas Day':
        return '12/25';
      case name === 'Christmas Eve':
        return '12/24';
      case name === "New Year's Eve":
        return '12/31';
      case name === "Veteran's Day":
        return '11/11';
      case name === "Thanksgiving Day":
        return '11/28';
      default:
        return null;
    }
  },
  holidayDateToName: function(date) {
    date = moment(date).format("MM/DD");
    switch (true) {
      case date === '01/01':
        return "New Year's Day";
      case date === '01/15':
        return "Martin Luther King Day";
      case date === '05/29':
        return "Good Friday";
      case date === '04/20':
        return 'Easter';
      case date === '06/19':
        return 'Juneteenth';
      case date === '06/15':
        return "Father's Day";
      case date === '05/11':
        return "Mother's Day";
      case date === '05/27':
        return 'Memorial Day';
      case date === '07/04':
        return 'Independence Day';
      case date === '09/02':
        return 'Labor Day';
      case date === '10/14':
        return 'Columbus Day';
      case date === '10/31':
        return 'Halloween';
      case date === '12/25':
        return 'Christmas Day';
      case date === '12/24':
        return 'Christmas Eve';
      case date === '12/31':
        return "New Year's Eve";
      case date === '11/11':
        return "Veteran's Day";
      case date === '11/28':
        return "Thanksgiving Day";
      default:
        return '';
    }
  },
  eventsToHolidays: function(holidayEvents) {
    var holiday, holidayDate, holidayName, i, len, obj, userHolidaysList;
    userHolidaysList = [];
    for (i = 0, len = holidayEvents.length; i < len; i++) {
      holiday = holidayEvents[i];
      obj = {
        name: '',
        date: ''
      };
      holidayName = CalendarMapper.holidayDateToName(holiday.startDate);
      holidayDate = holiday.startDate;
      obj.name = holidayName;
      obj.date = holidayDate;
      userHolidaysList.push(obj);
    }
    return userHolidaysList;
  }
};

export default CalendarMapper;

//# sourceMappingURL=calMapper.js.map
