// Generated by CoffeeScript 2.7.0
var Apis

import LogManager from '../managers/logManager'
import Manager from '../managers/manager'

import UpdateManager from '../managers/updateManager'

Apis = {
    Sapler: {
        GetToneOrSentiment: function (toneOrSentiment, message) {
            return new Promise(function (resolve, reject) {
                return fetch(`https://api.sapling.ai/api/v1/${toneOrSentiment}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        key: '7E3IFZEMEKYEHVIMJHENF9ETHHTKARA4',
                        text: message,
                    }),
                })
                    .then(function (response) {
                        return resolve(response.json())
                    })
                    .catch(function (error) {
                        return reject(error)
                    })
            })
        },
    },
    IPify: {
        GetIPAddress: function () {
            return new Promise(async function (resolve, reject) {
                var requestOptions, response, result
                requestOptions = {
                    method: 'GET',
                    redirect: 'follow',
                }
                response = await fetch('https://api.ipify.org', requestOptions)
                result = await response.text()
                if (Manager.IsValid(result)) {
                    return resolve(result)
                } else {
                    return reject('Unable to parse IPify response')
                }
            })
        },
    },
    ManyApis: {
        GetShortUrl: function (url) {
            return new Promise(async function (resolve, reject) {
                var myHeaders, raw, requestOptions, response, result
                myHeaders = new Headers()
                myHeaders.append('content-type', 'application/json')
                myHeaders.append('x-api-key', process.env.REACT_APP_MANY_APIS_API_KEY)
                raw = JSON.stringify({
                    expiry: '5m',
                    url: url,
                })
                requestOptions = {
                    method: 'POST',
                    headers: myHeaders,
                    body: raw,
                    redirect: 'follow',
                }
                response = await fetch('https://api.manyapis.com/v1-create-short-url', requestOptions)
                result = await response.json()
                if (Manager.IsValid(result)) {
                    return resolve(result)
                } else {
                    return reject('Unable to parse ManyApis response')
                }
            })
        },
        GetTimezone: function (ipAddress) {
            return new Promise(async function (resolve, reject) {
                var myHeaders, requestOptions, response, result
                myHeaders = new Headers()
                myHeaders.append('x-api-key', process.env.REACT_APP_MANY_APIS_API_KEY)
                requestOptions = {
                    method: 'GET',
                    headers: myHeaders,
                    redirect: 'follow',
                }
                response = await fetch(`https://api.manyapis.com/v1-get-ip-detail?ip=${ipAddress}`, requestOptions)
                result = await response.json()
                if (Manager.IsValid(result)) {
                    return resolve(result)
                } else {
                    return reject('Unable to parse ManyApis response')
                }
            })
        },
        GetLocationDetails: function (ipAddress) {
            return new Promise(async function (resolve, reject) {
                var myHeaders, requestOptions, response, result
                myHeaders = new Headers()
                myHeaders.append('x-api-key', process.env.REACT_APP_MANY_APIS_API_KEY)
                requestOptions = {
                    method: 'GET',
                    headers: myHeaders,
                    redirect: 'follow',
                }
                response = await fetch(`https://api.manyapis.com/v1-get-ip-detail?ip=${ipAddress}`, requestOptions)
                result = await response.json()
                if (Manager.IsValid(result)) {
                    return resolve(result)
                } else {
                    return reject('Unable to parse ManyApis response')
                }
            })
        },
    },
    OCR: {
        GetHTMLFromImage: function (extension, shortenedUrl) {
            return new Promise(async function (resolve, reject) {
                var response, result
                response = await fetch(
                    `https://api.ocr.space/parse/imageurl?apikey=${process.env.REACT_APP_OCR_API_KEY}&url=${shortenedUrl}&OCREngine=2&filetype=${extension}`
                )
                result = await response.text()
                if (Manager.IsValid(result)) {
                    return resolve(result)
                } else {
                    return reject('Unable to parse OCR response')
                }
            })
        },
    },
    OneSignal: {
        SendUpdate: function (subId, raw) {
            return new Promise(function (resolve, reject) {
                var myHeaders, requestOptions
                myHeaders = new Headers()
                myHeaders.append('Accept', 'application/json')
                myHeaders.append('Content-Type', 'application/json')
                myHeaders.append('Authorization', `Basic ${UpdateManager.apiKey}`)
                requestOptions = {
                    method: 'POST',
                    headers: myHeaders,
                    body: raw,
                    redirect: 'follow',
                }
                if (!window.location.href.includes('localhost')) {
                    return fetch('https://api.onesignal.com/notifications', requestOptions)
                        .then(function (response) {
                            return response.text()
                        })
                        .then(function (result) {
                            return console.log(`Sent to ${subId}`)
                        })
                        .catch(function (error) {
                            return LogManager.Log(`Error: ${error} | Code File: Apis | Function: OneSignal.SendUpdate`)
                        })
                }
            })
        },
    },
    Dates: {
        GetHolidays: async function () {
            return await new Promise(async function (resolve, reject) {
                var error, response, result
                try {
                    response = await fetch('https://date.nager.at/api/v3/PublicHolidays/2019/US')
                    result = await response.json()
                    return resolve(result)
                } catch (error1) {
                    error = error1
                    return LogManager.Log(`Error: ${error} | Code File: Apis | Function: Dates.GetHolidays`)
                }
            })
        },
    },
}

export default Apis

//# sourceMappingURL=apis.js.map